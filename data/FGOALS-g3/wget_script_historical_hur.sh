#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/10/28 20:01:50
# Search URL: http://localhost:8080/esg-search/wget?dataset_id=CMIP6.CMIP.CAS.FGOALS-g3.historical.r1i1p1f1.day.hur.gn.v20190826|esgf-data04.diasjp.net
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?dataset_id=CMIP6.CMIP.CAS.FGOALS-g3.historical.r1i1p1f1.day.hur.gn.v20190826|esgf-data04.diasjp.net'

#These are the embedded files to be downloaded
# download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19500101-19501231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19500101-19501231.nc' 'SHA256' '7a9a94d8309030ec6d5caacd0d20c01447f4d69673c363cd82b2a029f1e980b3'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19510101-19511231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19510101-19511231.nc' 'SHA256' 'd7e9e1ce6ac520aa508dd969aae9417f144b6a5decd0f0090777502a4969d891'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19520101-19521231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19520101-19521231.nc' 'SHA256' 'e0d7515000fc57e02758fc9c59a374716a47fb1bbafa1077da48e61ea713071a'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19530101-19531231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19530101-19531231.nc' 'SHA256' 'b1e0ee9624f8aea6f740dd8c23478b1ef12d57aaed71d7e33536d5852a26f6f3'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19540101-19541231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19540101-19541231.nc' 'SHA256' '001cc36e900435d1143802f3008fb00d020f601842c1ab8d33038465a5172d0a'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19550101-19551231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19550101-19551231.nc' 'SHA256' '9b446bb09c5c74a9d313a2ef2ed1cddee77531c9933beae98db3879881d0460d'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19560101-19561231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19560101-19561231.nc' 'SHA256' 'f4be86bfbc0c6553a2fc95ee0aea5c550bb4936569010c2ba762b65a2fe85004'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19570101-19571231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19570101-19571231.nc' 'SHA256' '9f2e90455cefb8063404ef3e3d5a207076eb840c4401b59787c7d758f88d658a'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19580101-19581231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19580101-19581231.nc' 'SHA256' 'de9327ba39417157b42e2c85a7a1ba035a749b7bfe0b0d04e09e3dd80f1bdc90'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19590101-19591231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19590101-19591231.nc' 'SHA256' '6c6e607c31894a2c40c3dc2466831b7919dfbd2ada2ac566d8aa001fcbcd5921'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19600101-19601231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19600101-19601231.nc' 'SHA256' 'f810fc9868820f05e69614555a4a684908603b60b3366d232743e62a66257e24'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19610101-19611231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19610101-19611231.nc' 'SHA256' 'e12c3b427f0501805b720a3c8eb9a51182d7f373a43702fd807a92183d6d0a87'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19620101-19621231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19620101-19621231.nc' 'SHA256' '821164a123ff1ec64f9113e62371b4234bcc85ee9d2cf626fd6560b70996668b'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19630101-19631231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19630101-19631231.nc' 'SHA256' 'ca4117e7d9b1b5259750d2440ab58c4c79393fd6b80e234503d2d3c30041c731'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19640101-19641231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19640101-19641231.nc' 'SHA256' 'a4060729036efbd2d4e8e70b512bda5b2d34134a4d1ce097180bb32d915eec75'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19650101-19651231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19650101-19651231.nc' 'SHA256' 'bd54ac9a4680e2ca2e0f1bb1d01cba11f0e26a0e392637b1292ce0ac4356f129'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19660101-19661231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19660101-19661231.nc' 'SHA256' '7d48e8e29d82560b6b6b6eb6d16724c4faeb3596cab9b8b787fe82d927501852'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19670101-19671231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19670101-19671231.nc' 'SHA256' 'f733d0305a694cba2ef94158b11ec6dfd912c23031a2053d19124059af5b19ee'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19680101-19681231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19680101-19681231.nc' 'SHA256' 'bfd2a575e5373208c7a7156d0a81e278ab6b2bb066477e60fa09fe90329f0e9c'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19690101-19691231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19690101-19691231.nc' 'SHA256' '6b25c63a35a01df4120f17cf8b03e8067cda22ec09a5c5ad776fe46a33aebe0f'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19700101-19701231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19700101-19701231.nc' 'SHA256' 'a7bf85de080ce002059c8ba3a592f2cbc2f10d8ed2dea1fcf84443cd76edfada'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19710101-19711231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19710101-19711231.nc' 'SHA256' 'f5128107ced5c202f264aeadb223a7c14dfe5d21cb9b77d2ea6fa523c489ee9f'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19720101-19721231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19720101-19721231.nc' 'SHA256' '226a009b2e41e0e9d0646c08fa23dfc110d199feedc02890a1388e1c8752b8aa'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19730101-19731231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19730101-19731231.nc' 'SHA256' '01e47bdcf5da85b3d0cf5ba1e4f45823f46e5a619af05ae988d081f7e9e1d58d'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19740101-19741231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19740101-19741231.nc' 'SHA256' '09442f429ccc00a497a616f3cf933467046d6b3aaba4cc089c4aa00d4f94eb33'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19750101-19751231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19750101-19751231.nc' 'SHA256' '8ad5cbe379d9e00f59933827f73d0f1b91179a77e4d95e9994a1996ee8501ced'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19760101-19761231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19760101-19761231.nc' 'SHA256' 'a716a39458c5f70ea6eb99e523ede3d96a3f7f5274e2a708e2f60a89e309e718'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19770101-19771231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19770101-19771231.nc' 'SHA256' 'f963a41a86352aa9511e3f57378d843218849c6301d0fc817280c1c5a5d4bca7'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19780101-19781231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19780101-19781231.nc' 'SHA256' 'c529358bf288ceeee3738583c22e169b8b5cdc8a0acc139977482ffa86e9d7b2'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19790101-19791231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19790101-19791231.nc' 'SHA256' '679292ad4375d050bcca49e633b0cd2aa9288f7311794ad77542aeb43ec690fc'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19800101-19801231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19800101-19801231.nc' 'SHA256' '73a2034d93ed7e746102cda12aafcabd44645de21915549fdcf5a20d1faba19f'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19810101-19811231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19810101-19811231.nc' 'SHA256' 'f07464b2ec9b69ce822f16e86b7e5c34afb9766065065457206ebd9e1a30af69'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19820101-19821231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19820101-19821231.nc' 'SHA256' '8a88d9972460286981fa99f6cbc61df76f37394a70ea98848a2e3dfa989198d4'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19830101-19831231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19830101-19831231.nc' 'SHA256' '816199b2dc6a657c27697cacdc5e6c4f3d34f0e2c53ec9777cb416dd7c8ac770'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19840101-19841231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19840101-19841231.nc' 'SHA256' '32bdd64cc2d4871db5887a109e4a5b76f1af46678744c15beaa88d90739fc77e'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19850101-19851231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19850101-19851231.nc' 'SHA256' '4d77fc59908d213fedece7a9582261aa8a3d4f12dd8e5bdabab9eb9042e69610'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19860101-19861231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19860101-19861231.nc' 'SHA256' '5ea17ba30048ea125e18496863dce7518c7146649c93af4df10fc3891d3cdeef'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19870101-19871231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19870101-19871231.nc' 'SHA256' '364376d5cf8da792b30d0f6a8bb542815eba9d67a6b6241b9ad6065171d31db6'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19880101-19881231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19880101-19881231.nc' 'SHA256' 'f621854a73e847e20d5e1e8e4329c3de3fdc062ead00c7476d010faf95118045'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19890101-19891231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19890101-19891231.nc' 'SHA256' 'b19c11082d89e5d9c997ce3d3015c75663b9b0d12359f8c77ceb625257e2581a'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19900101-19901231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19900101-19901231.nc' 'SHA256' '802106ab5f8518384019e2625eead9c3fea9e616d8473dac7685b1c354dbcf65'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19910101-19911231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19910101-19911231.nc' 'SHA256' '88540b78005103930f53e00cf874a2f58eb497141ba35c606a8dcce199dc954a'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19920101-19921231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19920101-19921231.nc' 'SHA256' 'd740023079c201661c31eda57d07adb04a31f96d314a314545f327e58d141a4a'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19930101-19931231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19930101-19931231.nc' 'SHA256' 'c420438ef0c85c24658c9f11f0d7d91336a1f801a2b28a5cd8a6ff6ba0a054fe'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19940101-19941231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19940101-19941231.nc' 'SHA256' 'a49d1d4923995e3686c704509d6856b39e8d5e28ccb635ff6c92918d7fc11765'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19950101-19951231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19950101-19951231.nc' 'SHA256' 'e005cb9bfc15d88f690690d6163c502824d8a1c2553d14529629dd95a9767e84'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19960101-19961231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19960101-19961231.nc' 'SHA256' '79432de106e27bb59297b36ebff390437fd00fa1b4067d2d3d375d42e17014c5'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19970101-19971231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19970101-19971231.nc' 'SHA256' 'd581576ff52b948b99030dc6990253a242a513667b5a678e1e1792413bf6aef5'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19980101-19981231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19980101-19981231.nc' 'SHA256' '3e28eadd695e2b9ce5562299735f3474cea355f48d87a4cc767e72741b7ade42'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19990101-19991231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_19990101-19991231.nc' 'SHA256' '80157c3564224ddeaf67b11dfe48eeef00df40db00d5fdac140704e7b6a99665'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20000101-20001231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20000101-20001231.nc' 'SHA256' '414b62f03d33b39aa74dcd0bb54f9453f08e1e77f4ebbd4fd5c8d73a3934fd68'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20010101-20011231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20010101-20011231.nc' 'SHA256' '91805e198ecf21bd850f467ea959c35fcc69e802cdd8d28894d5064aa82f3191'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20020101-20021231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20020101-20021231.nc' 'SHA256' 'd67719a3eabfcd9249ca9abb8f6174de7223135816c704a7eee077db055e0832'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20030101-20031231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20030101-20031231.nc' 'SHA256' '439256e2185de1ec3515d9acf632c350dd7c0618a0c145875e02ed2aacb21396'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20040101-20041231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20040101-20041231.nc' 'SHA256' '9576e8bdd23e61ffbd1dc4d4f7dfe99b4c3e64162deca60f02b2ceaadfe31449'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20050101-20051231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20050101-20051231.nc' 'SHA256' '9cb6beb54df7e7a067395fd214c80d1688800d899aca4ab11c1000396cb34d1d'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20060101-20061231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20060101-20061231.nc' 'SHA256' '978d399e1a95fdf96ce1dfa2b5c62f097a7f058d4f80d15e422ce6e0a9df2b0d'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20070101-20071231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20070101-20071231.nc' 'SHA256' '10adf5244a39213abecdc5ba58859cec9d5a62ff3a836546c755919037eddda1'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20080101-20081231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20080101-20081231.nc' 'SHA256' '6b82bb716ab8d3634f0efef6ea9dfc200adad7a029d18993cc07894f9fd9591d'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20090101-20091231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20090101-20091231.nc' 'SHA256' 'c8ee0eda8ac8e2eaf3573dead8983e683ec3742638d8edab6cde8153c6421f0f'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20100101-20101231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20100101-20101231.nc' 'SHA256' 'e8bd4a5a736dbfe77dc73aed9dd1253f3c8bd6b6dabf0d63680e8e0d027b0087'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20110101-20111231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20110101-20111231.nc' 'SHA256' '833d249d57b72a08b22f6a8bab750022884d938c21bd34e6ecee794a9e792f05'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20120101-20121231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20120101-20121231.nc' 'SHA256' '5cfd007205305beac7efea70e3296f551df267f5067fa5176a69d840134f9689'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20130101-20131231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20130101-20131231.nc' 'SHA256' 'c68f8110b2cd802ff53fabbd19fd793dbf3a099f13eb88c7db7537d07a129adb'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20140101-20141231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20140101-20141231.nc' 'SHA256' '0b8803ce3c8b31f4806192ee2461829677b189a1a1987e9522658dc13219ea58'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20150101-20151231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20150101-20151231.nc' 'SHA256' 'f0d5008c99d780eeb8e6c3efae587b296516e0dcc4f673fbb1b16c6207357ee2'
# 'hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20160101-20161231.nc' 'http://esgf-data04.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hur/gn/v20190826/hur_day_FGOALS-g3_historical_r1i1p1f1_gn_20160101-20161231.nc' 'SHA256' '24db90cc7614d6ffcb721a7c71b4b72984a0b091712a5bccb851f28bb5731e40'
# EOF--dataset.file.url.chksum_type.chksum
# )"
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19500101-19501231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19500101-19501231.nc' 'SHA256' '7dcc9d7a6132ae3be0c6b5cb0a813228c45e86b38c60ebadefa5d060e36bea02'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19510101-19511231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19510101-19511231.nc' 'SHA256' '9197a777009190c820a5f874417c5468a97f79fbd2f24a278a5b4c987e581e0b'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19520101-19521231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19520101-19521231.nc' 'SHA256' '2c8357bfffbe2eb2d9d22539517cf4472383923300e011b9a93326af10d25227'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19530101-19531231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19530101-19531231.nc' 'SHA256' 'c6a3b3adccd4d820f3f95646d2c11522962e6e3e3f0cdf926cd55c1792cb9eb1'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19540101-19541231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19540101-19541231.nc' 'SHA256' 'fbb5e740c758ced6a67f0d2146c9c84e4c5c701fd1c3f6c855b0758b5966ce99'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19550101-19551231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19550101-19551231.nc' 'SHA256' '5f5b45519d8e8d7d0307387ee8b8150347e48a3d5cb0f8a77d5bca47a8f7d8d0'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19560101-19561231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19560101-19561231.nc' 'SHA256' '6496e2cf80778a51a4669a226ee2ce8086489e7b2cebdb6d2758b778161999a0'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19570101-19571231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19570101-19571231.nc' 'SHA256' 'a4ac7b33daea810cb5830a015bbc34876064b3ea4cf8a3f0695daa94a2e5ae4d'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19580101-19581231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19580101-19581231.nc' 'SHA256' 'd373e3f514494b8ecce8b37cd2010bb7c35b7ae7d7d46236ae6af16e8c62ae56'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19590101-19591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19590101-19591231.nc' 'SHA256' '4c0a94aef5cf7c7f8f0211b7e0d4567c13b7d837f3321340dacd1baae6eed307'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19600101-19601231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19600101-19601231.nc' 'SHA256' '58c41f70670a61cf18878bf997ad23ca7d115c3d6f5c34bb1ac4ad50af0590bd'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19610101-19611231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19610101-19611231.nc' 'SHA256' '0315db237d2c94b46cc87138d003a317f3de9e34ea664e4afa1e879e5a67aad3'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19620101-19621231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19620101-19621231.nc' 'SHA256' '18ea2b02dcee50a0aede7fa552f393ba57ec423fd2f57bb7078353f891057dc0'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19630101-19631231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19630101-19631231.nc' 'SHA256' 'cae8505078bf4a468e624cfdea6e8f198a109f9e4982fd3b191ed2692b44417c'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19640101-19641231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19640101-19641231.nc' 'SHA256' '377e9bdf62d0144a72ab88ab02c07dbf6f471db0ba7e9a6b25d323666d093cca'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19650101-19651231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19650101-19651231.nc' 'SHA256' '8f8a130d565d611970bed2bca911226886d6d8f76914ff869207eb66ccfd5655'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19660101-19661231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19660101-19661231.nc' 'SHA256' '2cd5b9b92dc11e568473d51eeb64331f30a2b1d117727401ff57d3672d39eaa5'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19670101-19671231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19670101-19671231.nc' 'SHA256' 'cf96d42fbe6054ded19411f24f945ef845363193d6401264095a9f7528172d71'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19680101-19681231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19680101-19681231.nc' 'SHA256' '4c7f148a58ab2db248473ee10b4a421bc87de7a560a0ebdc97c0802ee6a1370c'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19690101-19691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19690101-19691231.nc' 'SHA256' '52758a6af7718b65e922a3e7a8d5009f6518fda4a58ad6765f016b4d8b54527b'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19700101-19701231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19700101-19701231.nc' 'SHA256' '04772c0e9abc8359a8125c8d950acfe9f51060bc030c496a4f10ae2684c8db7d'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19710101-19711231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19710101-19711231.nc' 'SHA256' 'a21aa33feac009f5a3a6ee2f809dbe872bee705d20ba12671d8d92cbf10d35cf'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19720101-19721231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19720101-19721231.nc' 'SHA256' 'b88c1684004cd8c40df52bf04eaa7dde6be8754c96e633099d95cdb3e8f97b25'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19730101-19731231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19730101-19731231.nc' 'SHA256' 'e1467e8f45642c9e4000333812256701eff9a69716439a3fa86fbbd089ad0e22'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19740101-19741231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19740101-19741231.nc' 'SHA256' 'ca1cc8580115377ae816e24664f265a0ccc9b726746bf15072cb80e6e550df42'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19750101-19751231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19750101-19751231.nc' 'SHA256' 'cf6aa4c30cfacdbbe75a32f97601c663943467da16b8dfb846a76785a4c5acf1'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19760101-19761231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19760101-19761231.nc' 'SHA256' '24640e78a11f387c8c55137f97671af3c82e34a83cc6032bcab6b58eddd3067e'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19770101-19771231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19770101-19771231.nc' 'SHA256' 'eab17ac2b712f3949b5a566a934d15e0823f8be7e8c3de90c57d4d8fdd819e0d'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19780101-19781231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19780101-19781231.nc' 'SHA256' '37a418ad1682a5b8931355620f551cc51c6ffb50e3870a0329cea2a0553f2dff'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19790101-19791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19790101-19791231.nc' 'SHA256' 'f3283817189e888da417901b97c933c77d1ef9da124fde59a7359a35ff779741'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19800101-19801231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19800101-19801231.nc' 'SHA256' '936f132f0765b6a6f6eb7b7570b3d36fcbf9d224201ed3674c3a19609f70c585'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19810101-19811231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19810101-19811231.nc' 'SHA256' 'ac26596a899aad9afa7eadef8513a5b201d76903f0c9aa87eebba61bb03b04c6'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19820101-19821231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19820101-19821231.nc' 'SHA256' 'bff15d411a599350fb9879f9010b8773a01c3eba0cc6f9a714a4bfdff51bb307'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19830101-19831231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19830101-19831231.nc' 'SHA256' '1d0328b139f05d070e62df62f0e9a5cd79e1b22613f630dcceb23f304ca69ee2'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19840101-19841231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19840101-19841231.nc' 'SHA256' '2f37dd1444a5fea70855fdab05e9005f9da918fbc4ce91f2737cbeb3791a5152'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19850101-19851231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19850101-19851231.nc' 'SHA256' 'c0e5538b50e8deaecd2595b06c4d8d2794b1fdb06c2af02785e9c938ae0c501a'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19860101-19861231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19860101-19861231.nc' 'SHA256' 'ab755c4daa6d9260667215e7dc739244b67d88e2611661499aba2397c1bad45a'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19870101-19871231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19870101-19871231.nc' 'SHA256' 'a19d2ccddc6b14ef1b224a6bf4e83dc5d1b7e7f2c7c35a67282b09806df04785'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19880101-19881231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19880101-19881231.nc' 'SHA256' '4ef5bdc5b1db07c6b0f0c3c8d7275b624651787b69ee62e981ebee4050d8be5e'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19890101-19891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19890101-19891231.nc' 'SHA256' 'c89af30508e5816c691236c7137c851499a5017cc8b4927c76b5757d42af4a29'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19900101-19901231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19900101-19901231.nc' 'SHA256' '3bb1f21a28037006ff24e3e21f4546c9eebab4e12169a14aa7029a37cf480882'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19910101-19911231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19910101-19911231.nc' 'SHA256' '32dbc7988f8a493fd0ac8bfa81dcb18b2d522c6c3f43658b73e21e5481c6abc7'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19920101-19921231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19920101-19921231.nc' 'SHA256' 'e67f439211772e2f9be8da304143f2718cf8a43bd8ecedaea5d9272693f85db7'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19930101-19931231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19930101-19931231.nc' 'SHA256' '00ee99dcf553f363178c7452da3fc0d516ea7f19ef7374315202d299da1c912b'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19940101-19941231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19940101-19941231.nc' 'SHA256' '10271164d94e1be4306bcd282b468ff7cf6337a3207ac2a419ae904ac3fab8ea'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19950101-19951231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19950101-19951231.nc' 'SHA256' '8854f55d9811cfd91f5c46a2d55ae324f08348592f2b1766b9daf1cb454d7d59'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19960101-19961231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19960101-19961231.nc' 'SHA256' '1dedf6e24174c010942d58a20ac6238533b8d20463be089f098a871cd40e6b39'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19970101-19971231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19970101-19971231.nc' 'SHA256' '7982f4a83693579d390d0c170033ad98dd56a895596401efbd895667f2022d08'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19980101-19981231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19980101-19981231.nc' 'SHA256' 'ecddbb06e595b5c8aaf99c046777fee389328481a006e4e3d279919566c57833'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19990101-19991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_19990101-19991231.nc' 'SHA256' '107275b493b9a9a40529209f0cf42c3f3139e763458992d72544879690301c7e'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20000101-20001231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20000101-20001231.nc' 'SHA256' 'd7e3855f8ba3b335af8534675bb791b135a303beb60fdcdfda61819a19e28a76'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20010101-20011231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20010101-20011231.nc' 'SHA256' '1f30bb2f73e75e5e63fbbfc3460d6ad512db3cec5508a1b9f1b93c2dbc3d0419'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20020101-20021231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20020101-20021231.nc' 'SHA256' '5bf3684b2dbd3e48ac68246bc83e3700039a437b93ca11c79f5eed7d732a8532'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20030101-20031231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20030101-20031231.nc' 'SHA256' '5410f8f0323209b42f679ab82f6fca67db95f910875f5814317a2f9dc399c4ab'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20040101-20041231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20040101-20041231.nc' 'SHA256' 'bfd3ad8672095f07f589912da10d0799a4efd2ffc413e09ad075c3cc292340ee'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20050101-20051231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20050101-20051231.nc' 'SHA256' '3995d582a65c73b44ed9033bdb318a7645d08aea41344429e931206c522b78e0'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20060101-20061231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20060101-20061231.nc' 'SHA256' 'd907e98f891105f46861188f932c0b857e0c27804b54d95d4a5e061b8dcad09d'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20070101-20071231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20070101-20071231.nc' 'SHA256' 'dabae75d71cb858ae9c0a7a571317c74cc00ad596e845fb39f6a26d230761fc4'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20080101-20081231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20080101-20081231.nc' 'SHA256' 'd7f5d763beea0c968df73c49967dc50eafbb9fce12b774ceb9b3da458308e8ee'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20090101-20091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20090101-20091231.nc' 'SHA256' 'b5609cc73f065e8c8e1b37c45e88003b1084e1e2f26b53893a861d3722f24db8'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20100101-20101231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20100101-20101231.nc' 'SHA256' '402edafe2568a3e7b70c5926f6190810ac08e58d69315a6613721791c9857ad2'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20110101-20111231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20110101-20111231.nc' 'SHA256' '61338875e68beef31d3eb3a1491ed5b5ecddada19abbd57456f563450f23626e'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20120101-20121231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20120101-20121231.nc' 'SHA256' '03f25d9ce549f6c2f929a42b10ac0ff5b481e8b1297c2e6a90d7b5ff2b191282'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20130101-20131231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20130101-20131231.nc' 'SHA256' '9fe65148302ce0612474429506269847e8a3090602a1914d60ffabdbba5f04cf'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20140101-20141231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20140101-20141231.nc' 'SHA256' 'c3b9ff09d8025c79f42a9feae213b589d978e9741bb2c0f8417f0acea12d900c'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20150101-20151231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20150101-20151231.nc' 'SHA256' '7cc99991b3885861b65babb9fa854e42c7a5937b99f0f4d73451a8e6e4d4b693'
'hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20160101-20161231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/day/hurs/gn/v20190826/hurs_day_FGOALS-g3_historical_r1i1p1f1_gn_20160101-20161231.nc' 'SHA256' '85ca52cd64ee6491f5d0436abbb93456fb6ef0cbd6cb03777821386eef2b50bf'
EOF--dataset.file.url.chksum_type.chksum
)"


# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 167 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
