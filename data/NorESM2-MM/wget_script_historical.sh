#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/10/29 02:42:25
# Search URL: http://localhost:8080/esg-search/wget?dataset_id=CMIP6.CMIP.NCC.NorESM2-MM.historical.r1i1p1f1.day.rsds.gn.v20191108|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r3i1p1f1.day.tas.gn.v20200702|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r2i1p1f1.day.tasmax.gn.v20200218|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r1i1p1f1.day.tasmin.gn.v20191108|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r3i1p1f1.day.pr.gn.v20200702|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r2i1p1f1.day.hur.gn.v20200218|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r3i1p1f1.day.sfcWind.gn.v20200702|esgf-data1.llnl.gov
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?dataset_id=CMIP6.CMIP.NCC.NorESM2-MM.historical.r1i1p1f1.day.rsds.gn.v20191108|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r3i1p1f1.day.tas.gn.v20200702|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r2i1p1f1.day.tasmax.gn.v20200218|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r1i1p1f1.day.tasmin.gn.v20191108|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r3i1p1f1.day.pr.gn.v20200702|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r2i1p1f1.day.hur.gn.v20200218|esgf-data1.llnl.gov,CMIP6.CMIP.NCC.NorESM2-MM.historical.r3i1p1f1.day.sfcWind.gn.v20200702|esgf-data1.llnl.gov'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18500101-18591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18500101-18591231.nc' 'SHA256' '829673f03198f6031659d3cc9dc5212d70d9442b27648352274cda829db55abb'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18600101-18691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18600101-18691231.nc' 'SHA256' '4cf09acfe32db10400f11ac665bfba1f8d07efbc42f3546bfc3f80fd3eb868d3'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18700101-18791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18700101-18791231.nc' 'SHA256' '09f4a213035bb8db86b1184cb8f94755f1d554871369903516986b9219398b9e'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18800101-18891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18800101-18891231.nc' 'SHA256' 'c1d372d4b71d4de93b8652bfcde576c6cf187eb79a81540e31c840e4379bd65d'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18900101-18991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_18900101-18991231.nc' 'SHA256' 'f69fa23d0481989082acee250852b4f91b2d88a01576af54124d06352068755f'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19000101-19091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19000101-19091231.nc' 'SHA256' '9083d8b680c30ec206f6153dba50edfdf0ffa8f40bb96fa66d3281867c4cfeb2'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19100101-19191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19100101-19191231.nc' 'SHA256' '1b60e78bc6c73c42c35c29404e099600edf74d2afcfcf4e776aa073947b71a26'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19200101-19291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19200101-19291231.nc' 'SHA256' 'c52f5d4ce71d82f142a4db41430967e34da32b9412f24b80b1a31711b7e63a15'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19300101-19391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19300101-19391231.nc' 'SHA256' 'f3dc46543b07dd4aef25a516cd51c140e63b5db187ed85c4e552e8c701724f80'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19400101-19491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19400101-19491231.nc' 'SHA256' '8db14b02cf2cca0becfec84794a3f843b673a2331bcebc629e27c0dc8db7ff12'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19500101-19591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19500101-19591231.nc' 'SHA256' '6954753d505103ead02b54c57c8c08dfdc9ba0ec00e89e7397dd7b150a7eea7d'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19600101-19691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19600101-19691231.nc' 'SHA256' '44535c55b1bc1829a866e55cc1f292bc3fb39c8cb2d57521deadfefbe10e5955'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19700101-19791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19700101-19791231.nc' 'SHA256' '72a45466f83c99f39a7c7af2f15c0fac1c9c0cf087f02b23767547ab656fc21f'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19800101-19891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19800101-19891231.nc' 'SHA256' '6a98f2f248c8e9f32de1bd21c25292e4863e3bd033203e670f0d5fc6256c3498'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19900101-19991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_19900101-19991231.nc' 'SHA256' 'e568ae9312e566fae65be859c0104b6e19cc7f13c4e8924e2e844475335e9151'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_20000101-20091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_20000101-20091231.nc' 'SHA256' '4529124e5cb45cf6826895c4df6059416c80d771967c5aff31c6d077a1267ce9'
# 'rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/rsds/gn/v20191108/rsds_day_NorESM2-MM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' '085a98b981cc8c253c79d0e5e5a73f025928e99cc8f1d336430d50ded890574d'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18500101-18591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18500101-18591231.nc' 'SHA256' '18f585033534937860f6b064fc6c345c35b398fb41880066cd8de2a048a80db4'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18600101-18691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18600101-18691231.nc' 'SHA256' 'b6075794a025f20276f808fe01f0e34a97b0b0cf7b965641cc63e0ee31690645'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18700101-18791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18700101-18791231.nc' 'SHA256' '16e92712f3cca9bc0c3b49549a9e37bd38a3116d15759fac8443a21e005943b2'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18800101-18891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18800101-18891231.nc' 'SHA256' '25ebaace5a9f9e1a567689021c8edbd75f862475fd6e6e7971bc34433e4679b6'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18900101-18991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_18900101-18991231.nc' 'SHA256' 'b38aa0b9e0d022a07a69673f19aae2c1b75402b2dcf2838102518ed252863840'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19000101-19091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19000101-19091231.nc' 'SHA256' 'b10247f3350de6c1ae08467fd23d3b27d9764eda440b83ec41d618289cf61a7e'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19100101-19191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19100101-19191231.nc' 'SHA256' '1e07de78de91e2f29357abdd229e28845b2f5e2343d4e79f677617753c3629fc'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19200101-19291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19200101-19291231.nc' 'SHA256' '445224be3e11767a9aeeb8b678f0086f615eb81c3259438d35eaa3231f1375a4'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19300101-19391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19300101-19391231.nc' 'SHA256' '03e1e26e4630368e7a471e7081495e734e35c29fd937cd1d16070d22fe5e194a'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19400101-19491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19400101-19491231.nc' 'SHA256' '85f2bc4759857c87952d5a0a4ecf515bc257e564170fbda683e4c0d4d8ed453c'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19500101-19591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19500101-19591231.nc' 'SHA256' 'f8a8112ebdfa63bea10ed74713007938d771e347f28d017d67c265d5c5f80b6b'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19600101-19691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19600101-19691231.nc' 'SHA256' 'b849352aa0e43f1aa8c75bf514ecaeeddfb38f07b5cb8ae1be9f3bcaeb9ee083'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19700101-19791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19700101-19791231.nc' 'SHA256' '602972218210463f641819815a14a0434d3c7bb6d4911f422eb5ff1e230843d8'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19800101-19891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19800101-19891231.nc' 'SHA256' 'ba79ab3b7d75d5302a2c64a7bf15979ab57dd6bc9481ccc8656dfcee399a1976'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19900101-19991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_19900101-19991231.nc' 'SHA256' '89abff421185bfb24679062c59eb082893fd9793e2a0fb056ad09325fa1770c2'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_20000101-20091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_20000101-20091231.nc' 'SHA256' '5e86a5346d54fdd7fb11db14858169375861e33314ddd17929c8d4ab48b534b8'
# 'tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/day/tasmin/gn/v20191108/tasmin_day_NorESM2-MM_historical_r1i1p1f1_gn_20100101-20141231.nc' 'SHA256' 'b344a8ab5386d822a9441824d531a918d6b17762a7021996409a28de8d2cb7c4'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18500101-18591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18500101-18591231.nc' 'SHA256' '64ee790db5f05140ecaaccecaf90c664d5bd4c0660aac888c97cceb9972bfd58'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18600101-18691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18600101-18691231.nc' 'SHA256' 'b10fc65fac6b8a47860c4e0249c7bcef6e49cebff71c3734b6146e734067fe73'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18700101-18791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18700101-18791231.nc' 'SHA256' '345cf586d412bf437d22cb35bc836982b479fcceb3e6f373e2b562b91c5d8654'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18800101-18891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18800101-18891231.nc' 'SHA256' '63234be19c13c826cf7436735fcb6a2d253caeae4bbcb8a6533745564c8165fd'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18900101-18991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_18900101-18991231.nc' 'SHA256' '49bb9ec40e844afeb18e1f15f44a0e0088c99341fca22959ae20a40e91b8f9da'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19000101-19091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19000101-19091231.nc' 'SHA256' '287a56bf8dc30d38e0aca594a81fe0aa25a88d2d0245f5904efd2185f60fb306'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19100101-19191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19100101-19191231.nc' 'SHA256' '6ea86b14750e99dc76d2588656a69fa91dd882baca76fa4dd72dd2e87c112785'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19200101-19291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19200101-19291231.nc' 'SHA256' 'c4a1efcaea9fe9975a4fdba0f11e7ffd95114992fcc855075f7b25a1e4295664'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19300101-19391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19300101-19391231.nc' 'SHA256' '01b70570eb40f73e4fcbc2c42bd162de6d443588dadd3ebb190d1a02463910b4'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19400101-19491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19400101-19491231.nc' 'SHA256' '5b82a63bb326e7448e85754f4a833bf9b0aff80a5f456eb5939ce64f0aa743bd'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19500101-19591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19500101-19591231.nc' 'SHA256' '44739787bf74abb5b13d0cb9a18f71c3d30a3077ab8546926b3866ab5a4e7f70'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19600101-19691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19600101-19691231.nc' 'SHA256' '7fcd77e3f1fe4c0d60afd5ae6cfa7ebcc9d933f4fc6143e2bf28ff7799083dc6'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19700101-19791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19700101-19791231.nc' 'SHA256' '3ad05cb07f06775c9b8d0e3a62ef0b41f13c0ff56a2ecdbbcf25a7ca045d2889'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19800101-19891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19800101-19891231.nc' 'SHA256' 'b2a9c41b8a54ab57522d41851d7f3c4ce92ad5ce692ad92213618cf5c5b46dc3'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19900101-19991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_19900101-19991231.nc' 'SHA256' '711c45b9ab5068dc40627a1f687027daa6c77234983387b63c276e0a4e482e95'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_20000101-20091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_20000101-20091231.nc' 'SHA256' 'b73b2da7f8e1f21d041d4d87b444cdcb54bb7775c261617753012b7cee5a9e51'
# 'tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_20100101-20141231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/tasmax/gn/v20200218/tasmax_day_NorESM2-MM_historical_r2i1p1f1_gn_20100101-20141231.nc' 'SHA256' '6fb547bada8f94f1c35d21336eb321c0f201b86e995d077ffc1d779b63b1280a'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18500101-18591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18500101-18591231.nc' 'SHA256' '09de9b02cb2c6b64b8540c2ec79a2fb2471ddc0724c74cd75bab578d9fb42875'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18600101-18691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18600101-18691231.nc' 'SHA256' '977719d52c0a60bad8f368844af0f9500ec926bd75dd4865ff87c7068c641007'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18700101-18791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18700101-18791231.nc' 'SHA256' '0ac7415af0dc857d7bef89b47f62310b5ae1b34c401cd4a4b2bd63d3dbae50b2'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18800101-18891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18800101-18891231.nc' 'SHA256' 'ff5c06da899bfd360cd15e71526d308f333c5ba56ee21935ba14c3c0a5b1ace8'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18900101-18991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_18900101-18991231.nc' 'SHA256' '3c3eadcdd6a357fa9928be3ec212dc767073f4390afc4d3ad258921b73ebaa48'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19000101-19091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19000101-19091231.nc' 'SHA256' '5276f8d29800df8dd9d999bab61ee21c59e6510987bfb36fde0f048a1c573792'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19100101-19191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19100101-19191231.nc' 'SHA256' 'e81e5bf987933ef1d979ff8969eefd25d619fc38e6f914e9a4fd8ce9ed38bf7d'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19200101-19291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19200101-19291231.nc' 'SHA256' '4886fdc3d3c5a4c18e605cf7d6fabbfe6a2469798d89b7da38d168255ec51b30'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19300101-19391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19300101-19391231.nc' 'SHA256' '57a590420e933ae8d7d279bda661a67193d9f633dfd295361deed533a480c188'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19430623.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19430623.nc' 'SHA256' 'ead806afcf03ee3937fcd69578e78e572ac6420d09fcbb30241d45b2b400c2c7'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19491231.nc' 'SHA256' 'a57c854e4fa73f28d4a539512163805ca31e03f36024942f4723d7d50bd0a78d'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19500101-19591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19500101-19591231.nc' 'SHA256' '7c7b259f8d828ee389d42102ad417242d035ffda90bf1ae83bb48451255a5d03'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19600101-19691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19600101-19691231.nc' 'SHA256' 'd0902cd0bc60fd18ea18239416ee4ce11981b8b5325e41ecf127b35f78392f07'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19700101-19791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19700101-19791231.nc' 'SHA256' 'a3becf196986eb8bc12ec0979875f81c2ae8e39e13155cb3557a8e3533c37c23'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19800101-19891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19800101-19891231.nc' 'SHA256' '79f113b2531257405634004031e0b42b87dad8759761a6e693530327f7782ee6'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19900101-19991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_19900101-19991231.nc' 'SHA256' 'd47ef22cd2557c99029cc69fc2d5bc127ce6facace4b3b843774e540a5ee829f'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_20000101-20091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_20000101-20091231.nc' 'SHA256' '2ef75dd94b2050005b80227fe69294d5ccff5c8481ed5f1754c5f9ea7365501b'
# 'pr_day_NorESM2-MM_historical_r3i1p1f1_gn_20100101-20141231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/pr/gn/v20200702/pr_day_NorESM2-MM_historical_r3i1p1f1_gn_20100101-20141231.nc' 'SHA256' '76a6cd579ab02e7d4ec06e320e37db4efe65f9ba821d2ea5de9cf0eb635fc0e8'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18500101-18591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18500101-18591231.nc' 'SHA256' 'd6f9dd4af0b7c159d9646ef177f4d60724749b458e17918188d446259d3078fe'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18600101-18691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18600101-18691231.nc' 'SHA256' '6f7b8dd5546d27a8a6a991ce9820b70e47086d78a8353c474fccb4dfd1e4b5c5'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18700101-18791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18700101-18791231.nc' 'SHA256' '00aaa3aab812d3b04144cea8bcdaa65b65a28199f8b78e26fe7543fbb0c9f5f8'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18800101-18891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18800101-18891231.nc' 'SHA256' 'c6466ae84dd95df365c1dc1e316a2c6a83216744863a2da24bbe32dd7d5d53e2'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18900101-18991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_18900101-18991231.nc' 'SHA256' '68a784728562f853f23c0fce542a4f35865097fea07cd31d6cd27ab7e891afe6'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19000101-19091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19000101-19091231.nc' 'SHA256' '8b737ab84b7abcd8581cf54143138688041711ad383390ff422924b4a985f6ed'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19100101-19191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19100101-19191231.nc' 'SHA256' '551907e7051d075ae180575091965c1996f3664c7f95ef980bb9be793acdc715'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19200101-19291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19200101-19291231.nc' 'SHA256' '0cfc126ee582b4205ea37b05d72a118269727af926ccd97b00ee7b8cfb519e87'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19300101-19391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19300101-19391231.nc' 'SHA256' 'b5f89680ac03f5ed7fe998c9aa72ea5be1edccdb0dd54ad02726d518ba0b418c'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19430623.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19430623.nc' 'SHA256' 'b6f5c3328049304c36f51354088630dfdc40b079c68948810ecefde97aebf297'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19491231.nc' 'SHA256' 'fa635130a07812750771d55bcf220de127f77f71f5a80e623d8d88b602d6e0c5'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19500101-19591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19500101-19591231.nc' 'SHA256' '11ee8ffed7003271aca0611e311ad62e8c5bd99cb095f7d19d7b5ba7fc1d4e28'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19600101-19691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19600101-19691231.nc' 'SHA256' '259b27d7a01bd4ffd87230a7afdbc20fc64444db0fb42617b2f1659b42d02aed'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19700101-19791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19700101-19791231.nc' 'SHA256' '854a979b3ae0b3f474d96094e53f133d5e7d50015b637505b60e97ddb58e878f'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19800101-19891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19800101-19891231.nc' 'SHA256' 'e7f3d3f00ffb13c31e63a688a7f03f43703630739167c3bc7e5896d41d6b832f'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19900101-19991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_19900101-19991231.nc' 'SHA256' '97051b63b8970685af4e0e700863c87685152ab262a782631c5904ce32b2fc50'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_20000101-20091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_20000101-20091231.nc' 'SHA256' 'c6e9afb118f48747496c902e2c132c60086d7802043ecfb8d30dc759478b1215'
# 'sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_20100101-20141231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/sfcWind/gn/v20200702/sfcWind_day_NorESM2-MM_historical_r3i1p1f1_gn_20100101-20141231.nc' 'SHA256' '45a54f6943f2c74f8eb70887c4464108be6f91b15b2c7db9201545aa5ba36ec1'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18500101-18591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18500101-18591231.nc' 'SHA256' 'abe4eec2103051dcf42ea9108669e716325b1bfcfd3dccd50981093aea5af943'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18600101-18691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18600101-18691231.nc' 'SHA256' 'a885ff658d0a4f22986b56c7bb8a66a7c2188a8d628ef2424ad2315d19cceabe'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18700101-18791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18700101-18791231.nc' 'SHA256' '4cfd14f3dc8d09e24f1eb8d8389576ec66b7f0ac884ae7321609b51a078993c7'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18800101-18891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18800101-18891231.nc' 'SHA256' '3356bb53f922ec1ee463b7b9dbab6d84ef0ebdd0e0827fd114b7853e2b2dc9d4'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18900101-18991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_18900101-18991231.nc' 'SHA256' '08b2655265a51a16d25c5bfdd3812a140abf1ef9bebe357f1d9d4015155f0c13'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19000101-19091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19000101-19091231.nc' 'SHA256' 'e5b6f8ddfa5d069e56c92eb36823948b87ae868ac97fc60bb16f01655892f5a5'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19100101-19191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19100101-19191231.nc' 'SHA256' '48d4978fd6c1a3cf6c5957cee7288f50e9880b1964fecb99830e6b0925e3e2c2'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19200101-19291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19200101-19291231.nc' 'SHA256' '51a6acdd98fecf39b23b31f3ee163bedab56ee35e608504ead2302831d092a6c'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19300101-19391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19300101-19391231.nc' 'SHA256' 'a766a63e1f03b9445bea04c9bb3f8187f583e8b864730df3c5106b5edc75563f'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19430623.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19430623.nc' 'SHA256' '5079c15a3974a03b8c756f85777d08f9981197379d84d06bad53b3b57f6a415c'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19400101-19491231.nc' 'SHA256' '1c3a52b4516f099d79277b3e39d3513367e2c7abf1b8dca6fc26642d75fa52f2'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19500101-19591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19500101-19591231.nc' 'SHA256' '9d33cd6ca78b614dce916ba22f6729a413b50b449c3641960d164d5641c3dffa'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19600101-19691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19600101-19691231.nc' 'SHA256' '163ee56a1ec08d2b19cfe82b035c3943f25e7c7aa0260a9630a84e56279e91e2'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19700101-19791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19700101-19791231.nc' 'SHA256' '56b0ae9908851b7fcca18957386b0c34f05af674bf6116998338675c700aa4d1'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19800101-19891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19800101-19891231.nc' 'SHA256' '344044c0c3a4defdec0c17f8f31a86e4f9a534aa92c8a1d5901db6d9e26f0813'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19900101-19991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_19900101-19991231.nc' 'SHA256' 'd3bcab250fdd575f045c09e6f63434badde5371a33c22697763b66df4d3a8725'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_20000101-20091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_20000101-20091231.nc' 'SHA256' 'ada6fb2342db035a057640a6cac62ade9ee5b1a015cd50ccba5029d5292439be'
# 'tas_day_NorESM2-MM_historical_r3i1p1f1_gn_20100101-20141231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/day/tas/gn/v20200702/tas_day_NorESM2-MM_historical_r3i1p1f1_gn_20100101-20141231.nc' 'SHA256' '02ec100914ea1399522d3eea06c3d9a0eecd16f4d933935956d11cafa519070d'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19500101-19591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/hur/gn/v20200218/hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19500101-19591231.nc' 'SHA256' '857c7e579c9c5d8da99362728767413030eb9e0c7babe200932863b07b358310'
'hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19600101-19691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/hur/gn/v20200218/hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19600101-19691231.nc' 'SHA256' '01b83061dda56732f7a612d852f9539b856b3a34d8ef222672544c53a77a5a0a'
'hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19700101-19791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/hur/gn/v20200218/hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19700101-19791231.nc' 'SHA256' '8a36a0b68ace22642105e15af2b24a4c3df79ba8da4b881e86121a08edcbb123'
'hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19800101-19891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/hur/gn/v20200218/hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19800101-19891231.nc' 'SHA256' '3dcaf3c87fad5a49b897ecb533c24c1a3e6c82637c44d1662fc6c35d497a18d3'
'hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19900101-19991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/hur/gn/v20200218/hur_day_NorESM2-MM_historical_r2i1p1f1_gn_19900101-19991231.nc' 'SHA256' '3253f6b85ba672aeca6ea0a9144f0968fe81e190280d56ecb4e9265a39801156'
'hur_day_NorESM2-MM_historical_r2i1p1f1_gn_20000101-20091231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/hur/gn/v20200218/hur_day_NorESM2-MM_historical_r2i1p1f1_gn_20000101-20091231.nc' 'SHA256' '328fa5528dfd8fa6346a1cc783f3910b847ace121c463d09c3a6ff0ae212f939'
'hur_day_NorESM2-MM_historical_r2i1p1f1_gn_20100101-20141231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/NCC/NorESM2-MM/historical/r2i1p1f1/day/hur/gn/v20200218/hur_day_NorESM2-MM_historical_r2i1p1f1_gn_20100101-20141231.nc' 'SHA256' 'b139be443b7e7ce2e91328ff1d13d95f5c65f45f7e9dd8cac9f269432dd0f6bb'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 112 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
