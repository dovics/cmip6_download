#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/10/29 01:29:47
# Search URL: http://localhost:8080/esg-search/wget?dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.pr.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.rsds.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.tas.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.tasmin.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.tasmax.gn.v20190710|aims3.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.sfcWind.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.hur.gn.v20190710|esgf-data1.llnl.gov
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?dataset_id=CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.pr.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.rsds.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.tas.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.tasmin.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.tasmax.gn.v20190710|aims3.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.sfcWind.gn.v20190710|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.DKRZ.MPI-ESM1-2-HR.ssp126.r1i1p1f1.day.hur.gn.v20190710|esgf-data1.llnl.gov'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '4533b55abaee7c388d0aa38f60dfdaa03f173578bdd7ba20c2a5ce0736974bfc'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '51c0087d1fedb8d41247f90079809e9a8e261d46cdd8dc8a69760a70c4c6b9f1'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '505b64ae99c0b9eaee41a46dd94dd169f8fd1c0cb7ba2fd7b7d0c36656b318d7'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' 'f654ba091e0d27ce30b7ad317ec25ab506d33bc3349ab07a48450cebf178f36e'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' 'd829f0155b617af5395490dbb0ca33ddb57df915ac066344300ba9d8c489625f'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' '9d713a265113cd35f8b81694bfc8b49b4000873cd10bcfe49fb8936886351d73'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' 'd9981292986ebb7ae186f91c7e42b1fe281c87e4398336c5dc96eb43111a365c'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '5ede389faa8394f4747caff42bf7cf3caf8297054fe3fed221c2e57a39d0482f'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' 'b5a0a0385c8b8a63d5e6d5f86f5d47622bfd7749e93695de95a138410be1092c'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' 'c32ba28ea5f9ff7b44fb4e8cf1e205650fd1b5391ee9d44fbe03d7b4c2c1aa5b'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' 'de4a0186f46a06a891e62e52391b1364cbf54c2658733d37231ed117653b6ca9'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' '8efc9b2523ce7ca986e86d361eac8e54cbeb87d10098bb17a1110aeb7212bb1f'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' '19fda80781edbf8e1b75921505e47ad797229e9e75400a5ef520c3bac17c1eb7'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' '1988b6638f60ef9187ad3daa2fce6571d6769bb020b08b68354ad0b497a37265'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' '7921bc565a5e4b6ea20b717c63247d9ff63e61d0162c451af2f6a31cd765558a'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '5b255d231827bfb14efe1958948d753f106768b5cad5c04a87699af825ae58cd'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' '0544aba412cd2362c871145f8313004586995214fdc21df9a065696fef0034b0'
'hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/hur/gn/v20190710/hur_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' 'fccf21c52436526b9791e6b2c70f30dd529a93bb0c51673a279b42c1dac47f7a'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' 'c665041d4f654172e4d9650e7df7a84111c8b7d03d840f9b4170ea18a05b74a8'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '486d8270c7e29512f642b7c871d93259963b2120f283ae9b440cf9c6a7bc8a21'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '2fd9149638beddb6c1c807129ca0d0eb3d4ff2ab03935b7236a28434fd270c2c'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' 'cd0529b516a569850c74d6256f8c104e9f8695c9139be33833a80c319b95ea39'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' '5435fd3b23f755ba6ee7213f2fcce00c61f7aac060d3b6483e94b1193ebe7af5'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' 'ab279c7ccede1b57b30507134db171c30b0ab0ba41c8551f7b73771ec971761b'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' '9a8cea4b66470e61e0c1fa1f9f5167114b1951966bfa0e6e3295be15cb61f37e'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' 'b04ac5b5849e3170b519f8382fe27a7d5c0db8f04e6a8bbf732a45310c211dfd'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' '49da6d7a76b125931afb21d0b518f9b108ca2f0729ea7be9cac81fb252071dfc'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' '9f1ccf7caeb83f8ec21d9ab8b64d8abff60b62daa638ec0af5311bdb69804aa8'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' 'efaccaba9aa5f18db5723a613f2fa8eddd25ab1cc19189ae1e09b832044c164d'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' '3239e645dbfe40ca98e3a79e3d34ae3cab7ececedcedadba45eca80c1908406f'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' '8458650d456e3e2c7fef862eaad256e2279ab31ff3e09acdd0abda8e29aaba69'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' 'd929377d4a1991ba9f47501e4877d805034f26f63b0d19afb261c373e6cf32bf'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' '780edd8964764b3624a2e9f0768dad1547c42d351c9a2bb4a14912cabe13cba0'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '1062f2ecc52c22ac8ac62d196a20cdf68ec79a14e284d91566624bb88089d7fd'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' 'b245990e0aaa271240104cb55c3c4efd87d2b1a9ad2cb27d1ca6824c650e03f1'
'pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/pr/gn/v20190710/pr_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '8f7eac97a6c60ea87c330c566e413c041de35824d0fd04270cb19b44b8e6f6dc'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '34deebc50a871469fde2100a830f048ade2e95144e30e17b7e40960787768438'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' 'ded78aeee3c367fe0dd35cf6c742013ac582166e8086b7e6556de4367b960495'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '8762738d7561a22debb0559bae8efa4beaa483d97b3bae333df7cf0ad8b85bcf'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' 'd3da432b69141810a83c52e0994631ac4d32d3d3f2c752f351f65062ba32cd7a'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' 'cedd3c324159a0f88d561acfba0acfc53a0d037242e2d63e034d156cf1c0819a'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' 'f8ba3f131c50cbfa0ac8fadfc8046e5d51f313b60daaa61cb4e41f2a1d90d890'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' 'db205e331703ee1aa1bf6f31e48421100326ee894d9d3d6d459334472dfb727e'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' 'e81fcaf06323c956a30949af470277fa1a3b07146c29807cd24dddabb0a12456'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' '9545f734e8aae55f7d54c95f265e1aed08f8d4e3ff0c25a52ed20b0fe756c266'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' '69702e1890247398a56c9e079d52962e9925227a0dae8cebd4820a0018093dab'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' '42d87ce226c08a259f5be274ab90a07ad0c403c6d0742b0cdb98c621b2443c76'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' '225e7082b0d93746f5c2a5116f5f5c7fbc29f71fddf35cc8056a944268986201'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' '0352e20ec493a1a571832542a61b6f2c5b90f94474a5cbd80c8e6ed93582a3ac'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' '1843a00a3a5e9c06b5ef0d18058cc8ff1bd1db00ee95fd92f40055906b46a426'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' '0a53d3a1c6edd4dd179ed65476c0013d4cf5fb4426569a3100d1ad331fa2a7ce'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' 'bb6861bf5be66238a17a1b95c7e38a8a3b95e248caafe0b0adc52b439d0fc467'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' '736f2ecf1e44f55afaad9e8f7a3ac825708a637d681f3960d883a31bfd40546b'
'rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/rsds/gn/v20190710/rsds_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '2ac896a9994c908e6eef29edf5fc0d3e687793e92a5bb23527f6610d3b23d3f3'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '960bdd781bf66d48747bb4139545e4a336d5e64db440affc3ed621177942e327'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '6419d2153bc182012d58319919d5b49d0479a522f8bf42f3df10b1633443e61f'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '2c8e5867841db413fa3a85104d680bab7c4eac1f1ab6fc61e8589893f02666a7'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' '93c2b7caf88859050a6f38488119884e450f994f5896274e4e67d646e6dc56da'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' '287484b08d729c330bda9966ad84f00c3caa81b278057576cb9166fc44128e4a'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' '44f8576d6ca07092ea06c81cccb3e5cd2ed326f2fda73c27b62626aa8322b357'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' '8e4d119bcdbcd993916c8c71e07df0fa00bdb9b285398d6c13d9344a871c7582'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '46e0e959ed6a2cd2554792586b2ae80fc27fae8a35ddf97d57d8c36ddd03bc18'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' '4d057fc7ffb0056ff759f48df2a934e22104d1fcc51567a8a776d684d9665e3d'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' '89cbf0c88a36f11c8b232901e753e1ca3d066911cf0905094adc2c3d2816b9ed'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' 'f2b39e0a47d51fd0c18b2cb118e3fec51d1939ee6a9f613d229a93ab627aa95b'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' '086c4ac52896671a760b17b5654f88b1e2f1f03e3d53f3f7cc8938bfacdd31f1'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' 'da6ebd1cf06f0e5f052dc39ba53350cca472eaa14e83fa4b5349f2d9a9b4cebe'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' 'd10fda9d4380f3387dcd1e95b9983840d2736937f84954166efbdb1a48f1248d'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' '1ab18b95e0c295f9b405121a54c7084b5a155ca446b81e05df034e490a234b6a'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' 'ff37b0ddbc505da307f6dea6a4c34a512a8b03f0398aeca253d1f3a100e473a4'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' 'd0611c51812d20d205189f4c2f0efaf806a8abb7a377a9b9f0aceabc663850e2'
'sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/sfcWind/gn/v20190710/sfcWind_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '7c046e2a5aaead2defcc176cc3e6dbe75bdd16b992419bd4554842e0399e08c3'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '9ff187fb794ccfcc3381fcde8eff575ac1dd1f237503048b5bc7c77618ffff33'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' '445902ed286d6a135425613256688c6931ae56b62bc3fad26a9d9c350e976395'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '187a84b7b42e2dc7a30bc8735b9ddc7a3aee4930a4c4bb3d16a6298a9b4e65fe'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' 'e467bb1395d15549ef3456e6dfb9beaca40f1a3ed3b8932520a68ab3f3cc06f8'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' '8903e721bd2a0896b470d11746a95a840c026cf53588c0a8509884d212b26104'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' '30742bf30d5ea706e17f45f53a780b8c88c30abb07ccfc6a7db167573d25f1ae'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' '426ab8deb664e80dade45bb4f393972fdd1205249e624f6a60d961ca9dfc1f76'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '721e93d679041d426fe1e0fe58de4842937ad12e1c22b845fc7ee095e54361d4'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' 'a0448d3be10d77f8906832154cb3eda2cde635bce0773ef71d0ffebb9bc2e1f0'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' '395e83c9c75179237711ee7e793f94f458e449545e95dc02c3ad56bafce23544'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' '60247ddecba48cc80e4d3479c40bdceb5d4cd157d3f03c1b4c72368eeb39a180'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' '4ed0f04aadc8f6e83fea910a2d8b57802120632ec5c3e4a0f48756eaf7bbafd3'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' '74ee265f0a7783e1f99aa8ef73683ab924c9938bfbd37b8b4256fee22112fc95'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' '37a46bd320222ac44dcf2264baf1faa5329668c475d0483d2029195cfc5deb86'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' '2487e311cefd5c6052233a61c35d5656d928f768231e59d868ccefa059017b75'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '6351783c4b7b8a94c1a540e64393272d7dc1a679f52337e45b536a8b6be06e53'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' 'e8086fb5741bdaaa3184fa096925435de69db2d2da29fbc300b6023a56a478cd'
'tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tas/gn/v20190710/tas_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' 'd4f4cbd8e6a08322c1ef77fcbe776e920a7908c97ae75b4065f6de2e6ae496f4'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '7af6cae424ebf7295a0a9005dd46507a770f790ed60c09423896205381bbf441'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' 'c51d19e4006d37e37b3ac1b5da6406b2074da8c58aeefc8d161d048eae89cf6e'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' 'baa33084bdb0d9f0dcd16440f40ff7b1bc0db7b36e4d67806d5b6fc3433b7911'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' '9334f4d5eaaec9bc2e9312e15b82f17e0b26260318132d2217cb59d4f5104ca7'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' 'dc566f6d045c014a63db30c6646a0118a3904d7a3df9fca2b080f261fb40c531'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' '2d6de5d880cee0e376aa2b023d4de79d92037549365940a2956152aa4662ce82'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' 'c50726d00a17cc4b8a8b75861bd17ded2729e8a60449b9339b99cf555c7b98df'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '05ddaff519466872b77131bf83a3f880788d255dc47e0123f7b98c25c7d7e1d8'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' '84ee9a864cf7084e8faf51919df1b3398c15ea2ffea24be527390c3b20777f6e'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' '26b208782cc99b0295c4228daef2c070467ccebb7bcf4721814c7b33e6ebcf55'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' '745128ba51ba33e862acaf430d842c9aefe24b4ebc29bc92666f9d6c70aa6495'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' 'dbfda4f727a6f5cb1dc48b465effe5278ec8d23f9eda7058c75dff522d616e0b'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' 'bd1c1fbd95715b95c579cf63285331340cc7d8318cbad1e306606cbc0f557485'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' '9e7ec8a2d50f1adba926b62072bc0527789d04de70ec6f2aa2e66eeec162b085'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' '77c936012b5fbe5be286cd1ab82d8ec729a8b80800eb05907af3c5344e7f0a03'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' 'c8e4739fae027f2f0a7f4cb48ad58e4f18697bc1db2cda2a163b025dd76e96a7'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' '619e21c7bb35bd941f0dac749fcfcb6513971e1e47d7616d2e976aecd4bad06a'
'tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'http://aims3.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmax/gn/v20190710/tasmax_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '0567a3cfa53155291c1fa85c56ab454f331c79acf97cb854f7a1de05ba0ccbb7'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20150101-20191231.nc' 'SHA256' '9138e8afebc71edb5b9b9157e356500e9c96961960d1518016a5d01ec1b45c37'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20200101-20241231.nc' 'SHA256' 'b59e8087955549a62184b31f69e5f494b48ab02a8642a3fb0ef60e31c9373abd'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20250101-20291231.nc' 'SHA256' '1dee231fa1f6ad3f5566d7e3b14d6c375735cd18fe97ab83534be6770d79fa2e'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20300101-20341231.nc' 'SHA256' '81471737010afd52a19196aeae332c8e28f0f56fb194f4752092cec6edf6874d'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20350101-20391231.nc' 'SHA256' '3434916384a5a39dcd16a3a5548e7c9ef1a9a7674cacfb8d4434b995a4cf9298'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20400101-20441231.nc' 'SHA256' 'b80183ebc45c3dea3aab65c43016e0cbb0da95b0d58c89f89783c3a219ee8488'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20450101-20491231.nc' 'SHA256' '7680b868744a2db600318c6459bd81aa6d877477b506f4bcfebcb2adc70b20d2'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20500101-20541231.nc' 'SHA256' '7d585312aff9234963150de885cc5a0024423e857fffe839f1407a3604ffd142'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20550101-20591231.nc' 'SHA256' '9234254adeddef771e2f8054c0b14a0d8cfac0909d03c76fef979e925335ac30'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20600101-20641231.nc' 'SHA256' '00dc2eb00578b43d5227f294798a491499dd21b3d524650eb42d0e271d1643a3'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20650101-20691231.nc' 'SHA256' '58f6d3d6387d217c3c526125baf46d160b3db83693b394a0022521e319c1851c'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20700101-20741231.nc' 'SHA256' 'ff792ec389f2c2c5d43e9ae54459c11a3a96a078a73b6344b96b586adf7cd2cf'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20750101-20791231.nc' 'SHA256' 'fd3cbd65a1f8bfa6fbf80b89c0e773cc184be3f98775c022868ab29ed331b7aa'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20800101-20841231.nc' 'SHA256' 'b2321f6b463b14ad031c0f0241108c4a5114c9c87dd52fcda15f56f47c2bf0a0'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20850101-20891231.nc' 'SHA256' 'b8c45a1869204e200c144b570648e21698b4eae99d6a1b56ec4e8192ebcce605'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20900101-20941231.nc' 'SHA256' '6fdf91e84e75eb77fec9d2e93cc42dd48342f89c3474220526273473857c3de8'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_20950101-20991231.nc' 'SHA256' '04564795092840ea327b2e9208e5e7a3b600fc8ff30d6e1f93ed89f510ed2a6e'
'tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/DKRZ/MPI-ESM1-2-HR/ssp126/r1i1p1f1/day/tasmin/gn/v20190710/tasmin_day_MPI-ESM1-2-HR_ssp126_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' '664af5af97a623ae0bed6fad7a153787615fc9bf487b1a1d75778c4818c8d01f'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 126 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
