#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/10/28 22:15:49
# Search URL: http://localhost:8080/esg-search/wget?dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r2i1p1f1.day.rsds.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r2i1p1f1.day.tasmin.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r3i1p1f1.day.tas.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r2i1p1f1.day.tasmax.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r3i1p1f1.day.pr.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r3i1p1f1.day.hur.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r3i1p1f1.day.sfcWind.gn.v20200323|esgf-data1.llnl.gov
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r2i1p1f1.day.rsds.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r2i1p1f1.day.tasmin.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r3i1p1f1.day.tas.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r2i1p1f1.day.tasmax.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r3i1p1f1.day.pr.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r3i1p1f1.day.hur.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r3i1p1f1.day.sfcWind.gn.v20200323|esgf-data1.llnl.gov'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'a88cfc49bc269806763f22322ee16fb9ce6fabe0ec06613b8efd4fc4a59bf14c'
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'a60afd7e5c5968aa0599a214e0d4590ee33dd12bddcf43d1aac1e4c526311aad'
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20350101-20441231.nc' 'SHA256' '10374eb631150f32a6dc80fdadd8d2b388407d7e1a1bbb900b2a70b3c4a7c3b1'
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20450101-20541231.nc' 'SHA256' '38e460b44e461d9dae714ad2d57d85e6e34af040587902577abf0f6809271769'
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20550101-20641231.nc' 'SHA256' '5dc1b4b53784f9acedd96d17983a861128941fc425b538c69a44ac6a101b8513'
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20650101-20741231.nc' 'SHA256' '56219bbb07451943a9d1ddefdbb6b60d50bc5e2ca3dc45fbbbb238e620f83465'
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20750101-20841231.nc' 'SHA256' '08e1c0f12069984ccec79826e641d380109e08c93257674ea1b649bfdeef677a'
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20850101-20941231.nc' 'SHA256' '9dbd2f031a6a0bde645620bc3ea484778280d5dd97f639a05005a8cdfc3ea0c1'
'rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp245_r2i1p1f1_gn_20950101-21001231.nc' 'SHA256' '05455345c15484380a174970c9f3f0b1c0b0f95acf3a8f1b4fdca5e8ef8790d6'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20150101-20241231.nc' 'SHA256' '3d48af3e0e8aab3d84b0287b62b806e154fa00bd089cb5d7015aecf8831c2a61'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20250101-20341231.nc' 'SHA256' '2a07b7144662698fcf73f5742cae160e45bca399139d38be1e494dd3e0954a02'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20350101-20441231.nc' 'SHA256' '143805c6d842dc6791dcdb59f7a97a83e006c461a782f01d7088d751ab5e5389'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20450101-20541231.nc' 'SHA256' '2a67432bf3dc7b5b852fa6150b033992e5bfb8a9f59a7673e0d4e30d20f84e8c'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20550101-20641231.nc' 'SHA256' '97af6b78957c2ab72edf3e1ec13911510f565dd2d1628018828545db5dcd8a8f'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20650101-20741231.nc' 'SHA256' '5fdd552d768d06374ce6da9c3becd0f62d9d49c60fc2f3c042560875941da9c5'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20750101-20841231.nc' 'SHA256' 'f53c111014743280ce758b936bc288dbfff255b489eabcbe26baca09cdfdb2aa'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20850101-20941231.nc' 'SHA256' '629178254a22d8f586bba44517cc73473a4e5cd422a08449ab2c851013644226'
'tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp245_r2i1p1f1_gn_20950101-21001231.nc' 'SHA256' '8f65c91a2f3799b11674b967d529f2728d3a414a971ec5f4bea011918c47bc79'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'b336eb38efdc8b96c2c711cfbf9a9d5d4532b438daf55c0102195e86fce83957'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20250101-20341231.nc' 'SHA256' '1c441d6ebd7e4fc0ad1224a66e6925742c7725824c14eb36e4f45df951efbeed'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20350101-20441231.nc' 'SHA256' 'd83786b49718506286d0da5be35bd23c1d50b43ceb671748e632c7b0e18915f9'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20450101-20541231.nc' 'SHA256' '42e4a684e22f8f016fa11fc846b73055cdf510bcdba4ef8d20b3a211622c48ac'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'f018a2c76c651db28cf49f80ac75c5169588b9ffcb0e79b8be5f9b477eeb7e9e'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20650101-20741231.nc' 'SHA256' '008900a17c9ea560b1b026f7468176e08e20de8e9ffc38ad5fca2a1b17aa154b'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20750101-20841231.nc' 'SHA256' '4dcb8f7982476ea50d17721e9d29081ba229240d043fd72f1f64a504ebfe258f'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20850101-20941231.nc' 'SHA256' '2e9297abbe72d716dd5b10ae90da71c1726058e333dc89f1ef308edbca0a27dc'
'tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r2i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp245_r2i1p1f1_gn_20950101-21001231.nc' 'SHA256' 'df50fc8a864c6c2df0fa684fb17c0ab746546f456293a869951c6efc8b4640a2'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20150101-20151231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20150101-20151231.nc' 'SHA256' '6093ec7cd63445a20db5730a124aa706afba91ce7da48dcbf651ab336f46bc13'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20160101-20161231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20160101-20161231.nc' 'SHA256' '606c963c7d3976a9721c503915b527e11db4cfe6b6641a7b727a5fe41a2864de'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20170101-20171231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20170101-20171231.nc' 'SHA256' '1cd00aa51b0211456865f14258cd5a6a7979155c8858a63fdcc9834c89433dbf'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20180101-20181231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20180101-20181231.nc' 'SHA256' '3526006036cf9bf72ff8af4c6b039f1cb5ae4d91e3036d01f99c646edaca4eba'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20190101-20191231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20190101-20191231.nc' 'SHA256' 'd5ca45662dd0e72fcf483854b15bee15c11371f3cf4261ef61cd3e81ccfb7c07'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20200101-20201231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20200101-20201231.nc' 'SHA256' 'f0b18e4befa0d357fce784f853889123cfaffd15832eb9a3164ffd1adc5900dc'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20210101-20211231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20210101-20211231.nc' 'SHA256' '7709fb60bde2e00a0946d111eb5c222a8127a0f588df1be2db1d35c1b5b95cd1'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20220101-20221231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20220101-20221231.nc' 'SHA256' 'e3219b8624b54df0a4d72d93cdfd4bd767f0b5d4ed5731c161761a6515ab8e2e'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20230101-20231231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20230101-20231231.nc' 'SHA256' '5e9165c23eb826acd250fed8ded344678ac5e69ad87c0c7bf33be0f7d809e8c4'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20240101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20240101-20241231.nc' 'SHA256' '9b5d06d77ee905fc27459bcf4516737c2f7daf39021baa40d6de8e343f9e7dda'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20250101-20251231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20250101-20251231.nc' 'SHA256' 'a49eae776f8a59b7c13f768cadd9db0748646bfd6dfc82e7fe6167fe63a98c99'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20260101-20261231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20260101-20261231.nc' 'SHA256' '6c65d2cc0dacf700527bacad01e05af63d02a8a1fd2b656e3ae6813cada7fe0d'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20270101-20271231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20270101-20271231.nc' 'SHA256' '0f0bed5dec7d4990d3c0e1503840b844a5cb2a646f6dba2dead3415809a61dbe'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20280101-20281231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20280101-20281231.nc' 'SHA256' 'cc761167b26fc0ff197f1a9fc78dbbfb20c5f5203a44c9b3ef83082e39cad6c4'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20290101-20291231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20290101-20291231.nc' 'SHA256' '9035b3c5e1f19efe95da538eb3cc3731f3d63d50a4407afa7005e225455d9460'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20300101-20301231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20300101-20301231.nc' 'SHA256' 'b38e72bdc101c9d4938647cadab681f4de86d29a341845e8109b823f4f98805e'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20310101-20311231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20310101-20311231.nc' 'SHA256' 'd61e682fb855769e232677998a82af39b131b30e75658319b15cc5142205e32b'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20320101-20321231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20320101-20321231.nc' 'SHA256' '967ce57ed29edf029937f50894060954ad09a6ca6d6febb825936e5936f76e37'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20330101-20331231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20330101-20331231.nc' 'SHA256' 'a110d52dfb2948438a04e47405751c4071f911d685fe6450fcdba82f64f4c73b'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20340101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20340101-20341231.nc' 'SHA256' '656d0608144ffc0e1afb295ada231146140d10392295f12e751d02032d605f29'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20350101-20351231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20350101-20351231.nc' 'SHA256' '6b0fb8bafce65b2081f22ed259e9be4ff3d6e94a963625460b1f7002be98f542'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20360101-20361231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20360101-20361231.nc' 'SHA256' '46be264978f1364dc80bd01434badd2e7ed88b8277a77b7394b535fea5c3619b'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20370101-20371231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20370101-20371231.nc' 'SHA256' '0520073bccf52a7081875a67b620f212207619ea5175601a3ecd7a2bee4fc657'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20380101-20381231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20380101-20381231.nc' 'SHA256' 'a10c046d3d700d08b5dbb6504664ed31e3159848664ac8a615a3fb3d1e52f4d9'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20390101-20391231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20390101-20391231.nc' 'SHA256' '80f87dd93bb7291192b422ac23617e9b777819dee83ffa5f46d35d12bbe5f805'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20400101-20401231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20400101-20401231.nc' 'SHA256' 'ea6ab1e7984304b167aafb339657604514b8788a154807cdb1292ed572f3c31a'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20410101-20411231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20410101-20411231.nc' 'SHA256' 'b2053e5321139e007eb80f1e40834707fd2657b4b752a0b8b088a6f145ee46c7'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20420101-20421231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20420101-20421231.nc' 'SHA256' 'a13a86b2dd1738ae2f7c2aba4839c1d9caba6d421f2a7d607a2165eae12a42e9'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20430101-20431231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20430101-20431231.nc' 'SHA256' '5449a0bde00ac1bde902391a09b831297410ea1c8639699f643e356a09a83bf2'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20440101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20440101-20441231.nc' 'SHA256' 'b8d1f3f1e428c26a30a40a5c8fd577e2a2dac3b0a706f0fb3b07ad26edefa816'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20450101-20451231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20450101-20451231.nc' 'SHA256' '89d781743632b2e30cdf7c13c56eac7ff106751660bc6ae69ba1e5aff1ddde79'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20460101-20461231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20460101-20461231.nc' 'SHA256' 'd5dd7337e985199a0df71b02f41459f8a805321d24d65a190886e58b2b376a07'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20470101-20471231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20470101-20471231.nc' 'SHA256' '3e7c0217b0a3e1b54bc519a2113ac1770e25c4d8563c1bbb8fb90afb57fe60e9'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20480101-20481231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20480101-20481231.nc' 'SHA256' 'f2708441f88144e113ce779982eb50a7ea9b41982fe62a81c77f4cafdefc089a'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20490101-20491231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20490101-20491231.nc' 'SHA256' 'cc52f654db4b9a98a775b7d439955738b508a5a723298acfe3e481c1eb1f397a'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20500101-20501231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20500101-20501231.nc' 'SHA256' '346524b169ce2206fa291e6c0e3f97cbe7436622926150a6533514cbfadf5069'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20510101-20511231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20510101-20511231.nc' 'SHA256' '08a58df1d06a05b19a343316c8e708dfca1ead058f12620bd3281f5051494c7f'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20520101-20521231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20520101-20521231.nc' 'SHA256' 'cbd08e294d2401043fdd4f23486b7b3c6e0b93372410388a6a2841c79c0e7837'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20530101-20531231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20530101-20531231.nc' 'SHA256' '19edd470470e724290f8ccd74db2e36a95eb28407acb23dc2197458ebdebcbda'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20540101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20540101-20541231.nc' 'SHA256' '91073f925f1245e5c13ee642dbe43d1f9514a7de1c7b61c211854a23692ff884'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20550101-20551231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20550101-20551231.nc' 'SHA256' '3895ad68a4aaaeae4700477bd33654b005e96dfa6fee198b201b0263091d6b9b'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20560101-20561231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20560101-20561231.nc' 'SHA256' '0e4efb26bcf7b3940d5d0212319639806da0f443dfa6de1317788d0a0eb9a6b4'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20570101-20571231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20570101-20571231.nc' 'SHA256' '56a2e3e0a958aee86c16c4a3584d822336e92e45c35aa47401bbe08217b0cec3'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20580101-20581231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20580101-20581231.nc' 'SHA256' 'e1b46f43dee06ee46b91754121018d54fc1bfa1d61fed18ed558c2a765594772'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20590101-20591231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20590101-20591231.nc' 'SHA256' '56602e66665fe5ccf80a62e8f0095fef52d9af4a9967a910c0ee1716658bb563'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20600101-20601231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20600101-20601231.nc' 'SHA256' '82930290821a3bc69338f3f164518965d4392d4581065340aa5fc73b15dbb9b8'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20610101-20611231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20610101-20611231.nc' 'SHA256' '4851b7f8686760454a1f7888eefed1dd20d444f5ace1e98563f3127ef55a0ce1'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20620101-20621231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20620101-20621231.nc' 'SHA256' '38598daefc92d79c789c3ea2ece365d6d75df8cc3ef7e6dacde7379fb8c720ea'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20630101-20631231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20630101-20631231.nc' 'SHA256' 'da490b2274471c91a9551245af9c15af848d414d391ae00bb82e5cfb5490025c'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20640101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20640101-20641231.nc' 'SHA256' '6503ec3aa46748162a3d79c6027021beda6d99bcfa262418c539a7cf9f3ea52c'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20650101-20651231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20650101-20651231.nc' 'SHA256' '87ac11b980d02de5a4f1bc1133803396aa6d6dc79105cf75f8f3755f8df0713b'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20660101-20661231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20660101-20661231.nc' 'SHA256' '3551e35f26e014b5388b537d4e177c595bd4609a439e65bfcf8de45a71910c64'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20670101-20671231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20670101-20671231.nc' 'SHA256' '7d372be76c75dc80fee871516a12587fec1a3f682cf600b0a6dfbc1e3990cc92'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20680101-20681231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20680101-20681231.nc' 'SHA256' '623f83b15e16d0c313edd4bf71848d3e688c95a3f3cfb273fb7a0abd9a38aabd'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20690101-20691231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20690101-20691231.nc' 'SHA256' '3191d3c828521ceba5b5cccc1ae37c254d90fa6fbd1222b2aad22fadb87008c1'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20700101-20701231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20700101-20701231.nc' 'SHA256' '3119ba40ef961f8e6c3fdc78aac2762b9992b00be11597496a02fc2890e804f5'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20710101-20711231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20710101-20711231.nc' 'SHA256' '3197afe3156eb3cda6a4cff3ab4d5cebbd21857ce92352226d0cd42508dd9b2f'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20720101-20721231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20720101-20721231.nc' 'SHA256' '9b8aad4ea4af0c5f6a50deb0888d4ab2bb36a799410daf791e25d7fdbb78e262'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20730101-20731231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20730101-20731231.nc' 'SHA256' '633e1bd1464749a3c5790d2f96c2b1f7ef4179562811477b3628f6ee31243ead'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20740101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20740101-20741231.nc' 'SHA256' '50429229f05846fdd2157eb9f849db4c50ebb73370fc56aa0873dcd2e0e421c8'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20750101-20751231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20750101-20751231.nc' 'SHA256' '9ff01934fcaae1f1f73acd241d161ee21f2f0dd7121ea7f33867104af1b1ecd0'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20760101-20761231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20760101-20761231.nc' 'SHA256' '1bdbcd0ef113b4e90bb1f53482caaf7b9417986f18623b60442506d1e4171925'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20770101-20771231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20770101-20771231.nc' 'SHA256' '26ab1e9cf009ece58084d0cd1b656dd053018beb776f98cd289b4f9b36b8ef0b'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20780101-20781231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20780101-20781231.nc' 'SHA256' '6254d0358d13de4426cca509a3c00eb347a95383115fce9161010e415d591ddf'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20790101-20791231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20790101-20791231.nc' 'SHA256' '3861ec8595bd6fb761c025b6e180a02edc645430b268a80d8754222e411d4218'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20800101-20801231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20800101-20801231.nc' 'SHA256' 'f98c17a2bf2e55140c0b70c1cbc08ccd12e9df5676b2373895de6f0a95c67e2a'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20810101-20811231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20810101-20811231.nc' 'SHA256' '414b2660dd8a5e03857a7307d47c72ee40f58e882a108ed5d5d47f6855c8fea7'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20820101-20821231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20820101-20821231.nc' 'SHA256' 'f271372d3f8a2b6f16668d2af171ef92234a656324f4e9d03888ec9447cc13ea'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20830101-20831231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20830101-20831231.nc' 'SHA256' 'f7edb56da3e5b69fd1af5f89552581f3caefaf00fe60b61e76de10e2def79cfb'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20840101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20840101-20841231.nc' 'SHA256' 'e6df6196ba39d1e5ba7dc445b512c8d5bc1a337274b9f51570519271852a62e9'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20850101-20851231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20850101-20851231.nc' 'SHA256' '927b63bb5e6bc3ee6023ceb2dce7f94d436de60a03655d5129ff024c478a52a4'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20860101-20861231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20860101-20861231.nc' 'SHA256' '9f7bc03d4a2b5225edbe8f9f9e962469c90083e048595def72ecfe68cf15ec17'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20870101-20871231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20870101-20871231.nc' 'SHA256' '4bef48cac5465cbe9b9751a24fdb169dac6d4137e8d6daad2a04cd73bd91620d'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20880101-20881231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20880101-20881231.nc' 'SHA256' '984099aa58c2a0513a17e398b746ceb5bf4f180aa47b43b528258177ff6bd489'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20890101-20891231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20890101-20891231.nc' 'SHA256' '0db2ee3f60c1f735d61703d22949ded4c9b74c2d9da7600bfe2d8b28e7e0b5e1'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20900101-20901231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20900101-20901231.nc' 'SHA256' '9007e85d7eab82acdb922f324ed3a8a0f6e5425dd64cf6b5887850d0d53775e0'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20910101-20911231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20910101-20911231.nc' 'SHA256' '9d570a5480ce8eeea4030e3feb8ebd7e27e8b5dde203c6d86583da55ab3f573c'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20920101-20921231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20920101-20921231.nc' 'SHA256' '2bbad20f2884f09395f276ff3eb542ec77d1255b678acc210e35f795054f7a26'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20930101-20931231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20930101-20931231.nc' 'SHA256' 'd7826fcbdf69c84276775206bfc8f535273645e279e046d21beaf23b8c3413db'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20940101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20940101-20941231.nc' 'SHA256' '883d3aeffc1655528546f399e9d5e0bf42e619d7bc02b69197041540a4f30f88'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20950101-20951231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20950101-20951231.nc' 'SHA256' 'a92f135569bb7a17b221917b5822ea6e9e8c39eedb4b0f0a945dec46b8fc3461'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20960101-20961231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20960101-20961231.nc' 'SHA256' 'e05714e473d04a3e4b8cc4366748732d04ed479918d9be9a54d7ee5c56ec4f35'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20970101-20971231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20970101-20971231.nc' 'SHA256' 'fee96075e9fe8f5680e9102b17faf9c86c1afb59be7df22174a9ba9aa11b033a'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20980101-20981231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20980101-20981231.nc' 'SHA256' '45a01e99af6d3ebac3d20ddbd04af6a260dbb5b7c4983eeea15eaeb4cb5201a7'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_20990101-20991231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_20990101-20991231.nc' 'SHA256' 'e02f25190f39da34f24905ed985d439ed90a5eaa954ac78c28f4641528169e43'
'hur_day_MIROC6_ssp245_r3i1p1f1_gn_21000101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp245_r3i1p1f1_gn_21000101-21001231.nc' 'SHA256' 'f083a395917e09d64a5a071bb26051aac73da1df7aa82b291497f1271cdc95d2'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20150101-20241231.nc' 'SHA256' '8d31d1d6fe5bd880328b7619fc0eb84498767154a6a4ea9b66ce456214eda811'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'ad5fcd1002c0f4459f82c2460df02d9b5ddef748f3b4875a424354f00c35108f'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20350101-20441231.nc' 'SHA256' '7cec57ac1fbd51f8dc38438f321f1d29b896521876480a50bc4b7edd49a361a2'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20450101-20541231.nc' 'SHA256' '1af2d8ad64f0d39ab2c3e9de4bac954359f0d638fedc8bacc4a01d7c34c90dc6'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'b93cb024017d1c9ca52b34a1b17fba1134e22a141823fb31936936a20670f233'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20650101-20741231.nc' 'SHA256' '3b3da62c2a8662c01ad2347cc84622e421fd1b441f4488f3a7d363ac765cd775'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20750101-20841231.nc' 'SHA256' '34ba36f5ffc761f06188dd5ab0381f057b1e63c60fa0b9a443298e329aa94cf4'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20850101-20941231.nc' 'SHA256' 'f9d097e5b819c28cb68b164ad7eb07d873eaa3349bf57e33ac94761632f7560e'
'pr_day_MIROC6_ssp245_r3i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/pr/gn/v20191016/pr_day_MIROC6_ssp245_r3i1p1f1_gn_20950101-21001231.nc' 'SHA256' 'e98f00fa2eb82da80ebda33bc6bb5b4d284fc06b1164ce41aa8b90482d43e669'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20150101-20241231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'd32d463025b083292b6018df6959eb8da09d2b9e703bbcd678f25a8ac64d8ea5'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20250101-20341231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'fa9258091428270c4e84ab89bd47773237cb252e6cd96e152d9ddcfcefa9acce'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20350101-20441231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20350101-20441231.nc' 'SHA256' '27594a9d2ddafb171d80ff230ca84cd7eb8393169eef4944b155e49e0254ea36'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20450101-20541231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20450101-20541231.nc' 'SHA256' '5d7b64ee7aefeab3d3bb95ebed0028308b51df4dbc4f8dc3a2c639bbfa9844d0'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20550101-20641231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'f367250c10930581cd3300a5c98718f3794bd38b4e50f494faafb4e6c96fed74'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20650101-20741231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20650101-20741231.nc' 'SHA256' '522009709104acbc875ee23e3c11661ba05b3d4c6dec6894cf2e63cb89ccde8b'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20750101-20841231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20750101-20841231.nc' 'SHA256' '580c306ccdb5d7abebda2b5383b08b7a3a69e908de53fb8e822129de0b96261e'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20850101-20941231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20850101-20941231.nc' 'SHA256' '73c33eaffbc19d2809468e692f04aa7500fc78378ee6c32de9ba47869e12c3f3'
'sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20950101-21001231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp245_r3i1p1f1_gn_20950101-21001231.nc' 'SHA256' '4217c63d6f4f1a1b79c242d3e23ae15f4f6a8f72ca2505c4c309d8d6cdede705'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20150101-20241231.nc' 'SHA256' '69bd595d8a996531af7d7f6fbe5d5a30f2dec1505b0224805994fb1236563dc2'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'aa0799bae3daa93fc7f854b08634dfaab67779cda17c7a42be721cbff34fe1ed'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20350101-20441231.nc' 'SHA256' 'a95b132d525ac8e6a0fe4f32a8f9c9e7acf1af332ddf1c4f9809062e8d671b73'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20450101-20541231.nc' 'SHA256' '7201981a96e5383fd1072d25e24ad692b693c0af6ca715d632bd733bc4a9ac27'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'ec91f20a9661a139749c2c0831a58a69968dd7910d1a64fb8d331587ccbb08ac'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20650101-20741231.nc' 'SHA256' '070cb47835a57d38b9b454aa1b62ee5d2c3f7a25168ed85dbc1f498efa810a5d'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20750101-20841231.nc' 'SHA256' '907e41016b0b302360411ae023e80f686bc5f016afc54850f2055a6249f6b912'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20850101-20941231.nc' 'SHA256' '87e33b45e74b30064953a608607ccf958263fb03d39da7ab85a22a27c43d1430'
'tas_day_MIROC6_ssp245_r3i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp245_r3i1p1f1_gn_20950101-21001231.nc' 'SHA256' 'ed81e602dde8fe7fccac70c4f9266acc0b437751efb2b6de393218815540904e'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 140 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
