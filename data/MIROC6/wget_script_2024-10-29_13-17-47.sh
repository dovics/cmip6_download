#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/10/28 22:17:47
# Search URL: http://localhost:8080/esg-search/wget?dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.tasmin.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.rsds.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.tas.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.tasmax.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r1i1p1f1.day.hur.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.sfcWind.gn.v20200323|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r19i1p1f1.day.pr.gn.v20221216|esgf-data02.diasjp.net
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.tasmin.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.rsds.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.tas.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.tasmax.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r1i1p1f1.day.hur.gn.v20191016|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r3i1p1f1.day.sfcWind.gn.v20200323|esgf-data1.llnl.gov,CMIP6.ScenarioMIP.MIROC.MIROC6.ssp370.r19i1p1f1.day.pr.gn.v20221216|esgf-data02.diasjp.net'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20150101-20241231.nc' 'SHA256' '42cf678be5704cb3fc31e94ce7f7f2684d947f6bee77c1d16c0f5e3e4a6afaca'
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'd73c26c8a840f27d5cd97574a7fe8885e3dc41da72ac7d21971e448249ccc0a4'
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20350101-20441231.nc' 'SHA256' 'eececf43d4515eb953d7d60579f5da99cad5ff141713ac18a1321fd1a7f5e220'
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20450101-20541231.nc' 'SHA256' '6ad52b6e94d6a4a583d7ccc3c42407b55126b4ed020fc7105e157b4e8e73cd97'
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'ed30cccb766d5d4530083319d2a14a9fe2cde220420d7af4e09fcef4ae360464'
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20650101-20741231.nc' 'SHA256' '825c28e7e2af776dac1468a496639318588f220ba26437894cc5f6c8cb81acbd'
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20750101-20841231.nc' 'SHA256' '52bcb430fbdeac175cc4d942e90d3e3ab18d3e552b28a472db767e241c1a1143'
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20850101-20941231.nc' 'SHA256' 'ec9ef7325a74a1718c59131def24d74a385483860136cf269996ace62e8d0ee2'
'pr_day_MIROC6_ssp370_r19i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r19i1p1f1/day/pr/gn/v20221216/pr_day_MIROC6_ssp370_r19i1p1f1_gn_20950101-21001231.nc' 'SHA256' '5e732d46f3842ac9de2a7e45bfa8a3b2c040f0612ac50f2473b616ad0122c32a'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20150101-20151231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20150101-20151231.nc' 'SHA256' '0beee47ec5b66558f24d2bbfd1e4007bdaeb4f61e77a9011098e9e1c482af825'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20160101-20161231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20160101-20161231.nc' 'SHA256' 'd58b70508ef08c7041aeca77697d5a121c625500ca7380b20ee0e21bc78cfd65'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20170101-20171231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20170101-20171231.nc' 'SHA256' 'efdcfc2f99f0a90cc9355c3d117790c091e669d9bdad5f25df91809a1e984cca'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20180101-20181231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20180101-20181231.nc' 'SHA256' '344e5bc7a2ffb64269344ff34c94b8d2baf32fbee2aa2e2dcbec68d1de13baa9'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20190101-20191231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20190101-20191231.nc' 'SHA256' 'ae0a80100f5c0cfe0a4fd50f2bd0fd30efd100206e957d76b4a558f9124aa027'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20200101-20201231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20200101-20201231.nc' 'SHA256' 'e5835380528f611c06302e1109d09c1682eed0449f12f62cc509d1683bf11f2c'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20210101-20211231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20210101-20211231.nc' 'SHA256' '0fc46ee41a3d5273af8572339cae34bc314e9264d1d2ce561648efdcfc5fdf9e'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20220101-20221231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20220101-20221231.nc' 'SHA256' 'eceb14fddc8b6ef9f8b0acaa6d5c18ecb6ba9b2cac927b12d9b38a45882ef68b'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20230101-20231231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20230101-20231231.nc' 'SHA256' '40ee0dd78427f768f9d74e70fc1aab1c580db0a6a91f7badf44239f0100d6d32'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20240101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20240101-20241231.nc' 'SHA256' 'fd2d05e8c952b1ee85d1d9b0915c571500d2504fc1c0adf36f234847d1664432'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20250101-20251231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20250101-20251231.nc' 'SHA256' '754f784713fa1d233358f13625c0db3772708634ff070eea4afd48a3b60a6452'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20260101-20261231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20260101-20261231.nc' 'SHA256' 'b708dd7f5da7d8d9091676c2a3c7c556b18607ebbc3d5b03c94bdee71db501cf'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20270101-20271231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20270101-20271231.nc' 'SHA256' 'da018bb31f076543286333dc948f0125128cd389454b75d59196566ae60ed43b'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20280101-20281231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20280101-20281231.nc' 'SHA256' '26b8f14e2065e3ab420d0184e09f5f7b1e28510f82ad4ea54b6a53cb2e5f9c16'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20290101-20291231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20290101-20291231.nc' 'SHA256' '5189e957328f147830fbbd441ffbe8b2aa8935a96a49995b1477417624dfd67d'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20300101-20301231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20300101-20301231.nc' 'SHA256' '661b422eea12733ba55ca6d1a5e65528790993e6b25e483ad12b507865263c07'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20310101-20311231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20310101-20311231.nc' 'SHA256' '28e35092fef9b02fb2ad4f1d91203ba10f76fd40a492c16ac1c8cb1ef96a4652'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20320101-20321231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20320101-20321231.nc' 'SHA256' '4782118481e662eb2a8576d35331539218436f3716f48db8942a62b92be228f1'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20330101-20331231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20330101-20331231.nc' 'SHA256' '27e277587d37155be94c14b01c360a358cf1b4883675a413a8a9f37a3f143435'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20340101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20340101-20341231.nc' 'SHA256' '1a019909119ff77bdd0327852d80c355a2e3ea54d181434a5fef199156f975bb'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20350101-20351231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20350101-20351231.nc' 'SHA256' '59692dee1213cc138930fb8a34ff9eece66a3e6db4626b27659f83735c13d647'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20360101-20361231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20360101-20361231.nc' 'SHA256' '94c3ae2d4c508b412b8adc1e164fd79d56102978b8ead58ff6ff90df6d9b51f1'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20370101-20371231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20370101-20371231.nc' 'SHA256' '83c8b3972c1b7953409a12004df95230ce9403c938c37fedc33e439c9620e649'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20380101-20381231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20380101-20381231.nc' 'SHA256' '28daba131f5fe2886f975a6cc5315ba7c850d43905aeeb1b72e83abd42eaa1d9'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20390101-20391231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20390101-20391231.nc' 'SHA256' 'afef7b8c8a594cf2a81c3201f4c71b34c9d6f7a82a129cfdb2609cdb287931e7'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20400101-20401231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20400101-20401231.nc' 'SHA256' 'f94e52c9a7557a8e5e866902b155f0f0ae045b4dc2f373f0ab1c46b854f654de'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20410101-20411231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20410101-20411231.nc' 'SHA256' '3df768ad6442b5118b1156aa35eafd09c9d8f785790ee3793fe50068e1e5c624'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20420101-20421231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20420101-20421231.nc' 'SHA256' '0e76a79ca22f95031500a69d0ed8319a67de3ece82251021171be9277213835c'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20430101-20431231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20430101-20431231.nc' 'SHA256' 'd57f02ee2d2ce5007be8094346da9b45494f27359a8e03fcf5cbf687fc686457'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20440101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20440101-20441231.nc' 'SHA256' '66c785ca80a6124f3cb6c045a49de15dd04ef6464c049bf5becb873823210cca'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20450101-20451231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20450101-20451231.nc' 'SHA256' 'd205d8705567f77e2c896661744711c3a539a7048004626b004861e27999d09a'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20460101-20461231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20460101-20461231.nc' 'SHA256' '032d04f33f82e18c2c04477e5233356e21d63dbb166f0615de04ab3b2459bab3'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20470101-20471231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20470101-20471231.nc' 'SHA256' '0877d987db7e33797ae68f17841ef66c4951788c9f003040968ad2d13cba2aae'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20480101-20481231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20480101-20481231.nc' 'SHA256' '3f5cea5b61b2dc2262434912ebab25cdeb213516260f616c95fe538fc67e43f4'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20490101-20491231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20490101-20491231.nc' 'SHA256' '0e990f7422c517dd6cf1c1e657ab77b319922d8d8cc44ac5fcc6839859ec6f97'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20500101-20501231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20500101-20501231.nc' 'SHA256' '05cd426660662c241ddd523293b678796ca0473cbc1cef0031c8fd8d65e5312c'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20510101-20511231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20510101-20511231.nc' 'SHA256' '3630b91e83ce824fef8f53ef6d18532222b99954cedd589d7b4f0558d792acbd'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20520101-20521231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20520101-20521231.nc' 'SHA256' '4cd90b70f4b04a3dce53a0058372531ca4d96b64cc2e396f0934e951b78fc79d'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20530101-20531231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20530101-20531231.nc' 'SHA256' 'f79ea6728d21b9f39b8ff18eda1eae6b4177c921e50703df3432c8e2352b4cb9'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20540101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20540101-20541231.nc' 'SHA256' '2f94d24dfc9836a6a6f5c0f7b843ab6dce3705080675da69ce7133183261ba7c'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20550101-20551231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20550101-20551231.nc' 'SHA256' '2b113cd8faab24a671a5ad561ef0575e105ff807c5bceb8039c5137c0718208d'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20560101-20561231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20560101-20561231.nc' 'SHA256' '3924ee7b05143ba4c480c8041fe616498f1d50310d0dff1162ce3f38d71b5438'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20570101-20571231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20570101-20571231.nc' 'SHA256' 'b88e1955c77afd26103968d84107e3665992289964064fb890d1d3cdb3d8ccda'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20580101-20581231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20580101-20581231.nc' 'SHA256' '866a67acdfb249acb651a484aa8626eb3c565297a0b3ad82c9ca2fbde12d301c'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20590101-20591231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20590101-20591231.nc' 'SHA256' 'c121bf7e5c5360a43fbde5d0977672710e3df3ff36e16321d8a94f2746f908a4'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20600101-20601231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20600101-20601231.nc' 'SHA256' 'e0f225d5d0ad474c9c78c41e488f7a0655b59b6cd471f716a3a36ef187a1ac02'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20610101-20611231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20610101-20611231.nc' 'SHA256' '34be3865efdd0f63c6598db21ffb2dbf607e67de6aabcab03b1218b5709854d9'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20620101-20621231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20620101-20621231.nc' 'SHA256' '7859a821407ce331f74a1fe83e89e6d7e5f5177f88e9f6de6c51be97d48765d0'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20630101-20631231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20630101-20631231.nc' 'SHA256' 'dbdda5f6a0813bf63097402344d92998dfb1b080238a0276439e3853bd08e3cf'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20640101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20640101-20641231.nc' 'SHA256' '51addef2048452c5b9e73c3052fcc50006fed40472c93a35e1732e2fec1238fe'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20650101-20651231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20650101-20651231.nc' 'SHA256' 'c7647820232b9b41cedfafb489a067f850c67784b62656a307b145e9f534d4ad'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20660101-20661231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20660101-20661231.nc' 'SHA256' 'ee109bc3ede34cbb775206bfe0064b10953d56b282d456c7bfc3adb471ba609e'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20670101-20671231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20670101-20671231.nc' 'SHA256' 'ff18a5d8f237d1b9ed73c8c04763eb81699a32efbab1ebf7769f61430e69a190'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20680101-20681231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20680101-20681231.nc' 'SHA256' '4acfb2221d49355216a158bc5e21a1dcfde149139900116d384a6ea18d8656c9'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20690101-20691231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20690101-20691231.nc' 'SHA256' '62d49630ce146d98b91254a3c6307eff81f1b60bd40bf652af7c6580f5136748'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20700101-20701231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20700101-20701231.nc' 'SHA256' '01c570756f6d64811c74a1f7c51e1150952b9079e538e7e5d1aa52496d6f90c3'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20710101-20711231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20710101-20711231.nc' 'SHA256' '77ae5dfbdfdf6ce0c7589d705d1c6d6093b95a711e9d45d4b1b18f290a69dce5'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20720101-20721231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20720101-20721231.nc' 'SHA256' 'df3e62188a776daf46bf87c1fccbbaafd0229c8447b5e1b68f1380a9510525d3'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20730101-20731231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20730101-20731231.nc' 'SHA256' '63c34ea82d57d95f798591366232b62a00c1310ea536e16a7c9e30ae7a1c7e9b'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20740101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20740101-20741231.nc' 'SHA256' 'cb2bdb595eaab160dd2fa667ea1ee66be08994762a6cfd3f36d8261ebb1fc203'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20750101-20751231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20750101-20751231.nc' 'SHA256' '0c6d3b57a13340208240fe9d0212393aca8f175bd041f41e45b7e3be3a4d2328'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20760101-20761231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20760101-20761231.nc' 'SHA256' 'a140fc2644627861ac5fb66d8295221deffbb90914723eb7b1c20e276db3ff24'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20770101-20771231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20770101-20771231.nc' 'SHA256' 'ea7cbaf9a1050fc0af6b6d946aab53ce4bb2e4162741132823ce5c14ae042548'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20780101-20781231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20780101-20781231.nc' 'SHA256' '76dfe5ff9822c5bb9f8388183ad6132a0dd954ff017a1a90f8bfcde55795fb33'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20790101-20791231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20790101-20791231.nc' 'SHA256' '72eceb65d296143f8a89d30fbff2773e483093977eebc17f7b3a36b95d35e7aa'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20800101-20801231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20800101-20801231.nc' 'SHA256' '579f316d0ff3bd569177960d4876ff72aeb06a16df3a4014f0a6a7eba702bb96'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20810101-20811231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20810101-20811231.nc' 'SHA256' '49a4e522f59b16b50aaaa7924eddd82997ce25040e149ecfb71cc53f8197dd7f'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20820101-20821231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20820101-20821231.nc' 'SHA256' '4c660d8a73c616b4fdabe5988e497ce41a1005b5140dd0f0fac6c7c7950c2efa'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20830101-20831231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20830101-20831231.nc' 'SHA256' '9190a68735a31a8904ebdb9656a2c0a6a8ded9de767a6304e712de794141d3b6'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20840101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20840101-20841231.nc' 'SHA256' '17953be68f2da16969600bcf76efd758abf0d5f452ee37a192440c0290aeb78c'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20850101-20851231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20850101-20851231.nc' 'SHA256' '3677c608583b8e5cf0d71112ae39ed8259d316c2df1c2452e229aa096045ed18'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20860101-20861231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20860101-20861231.nc' 'SHA256' '53f8f0118918f53e8fd2f05385752b5c9a2a34cfd6c5e7bb1c8542de7324a578'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20870101-20871231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20870101-20871231.nc' 'SHA256' '4d7c39765339a72a9724a2be07b377d15d74d7be75da06a24c243a0b13926bae'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20880101-20881231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20880101-20881231.nc' 'SHA256' '7ee491bba71e28cc0cf141b90f7980eaf1f0a5cd3744cfda7bcf07d52a5a8762'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20890101-20891231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20890101-20891231.nc' 'SHA256' 'd3fa8e9caa6b58b9442b72ff927cec0e03c6f2755a727052d4dfc22e57226747'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20900101-20901231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20900101-20901231.nc' 'SHA256' 'e8704789acdf62a8382906a151dc46c53b9d7008369dd864c262f6ba3f914526'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20910101-20911231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20910101-20911231.nc' 'SHA256' 'f06c73dd77e814e8faf6d59387ac5ba07d0cdeb8a1faabf8f3a6d4e2114a0d66'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20920101-20921231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20920101-20921231.nc' 'SHA256' 'f0c743737b41511ca54bacd6fad2975d5f90123b260abd5ab7b8fed2e79e3176'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20930101-20931231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20930101-20931231.nc' 'SHA256' '0110ce6e7e9614906191d1f261f4741291ce5cf2ec835f4935ee6aaed321cfe4'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20940101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20940101-20941231.nc' 'SHA256' '1d9a4020fd6600e6568437860f4cae935c58e19cf6b0d4c16b7b64ffb7d40cca'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20950101-20951231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20950101-20951231.nc' 'SHA256' '497e327c40a3a8d1dbea3d7d4bac2aff501d2da4a5fbd5993a13e1375d5eb0a2'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20960101-20961231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20960101-20961231.nc' 'SHA256' '810c8e832c991f74fb4f1eb9590599b8061fbd62a20aaba39e253dff401d5dc7'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20970101-20971231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20970101-20971231.nc' 'SHA256' 'cc6ae197e806264d5640dc7710d2c26b86f3686024e275d20d86f3cd46999a83'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20980101-20981231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20980101-20981231.nc' 'SHA256' '8b03c5e9596205e8995da76040d99573e410252e4ffce6be7af6e3c097b8be73'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_20990101-20991231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_20990101-20991231.nc' 'SHA256' '701464dd7d927fffbacdad8d64e8102cc6120415142ac474ec9b6148e110b9a5'
'hur_day_MIROC6_ssp370_r1i1p1f1_gn_21000101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r1i1p1f1/day/hur/gn/v20191016/hur_day_MIROC6_ssp370_r1i1p1f1_gn_21000101-21001231.nc' 'SHA256' 'e6df07850ad32cc5a331c7616e71a3ecc67643535e22748c6b43d59ef1c75843'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'fe8f25bad657872de71c58aa54dc3a632760c34bb6cb47f43db4dec116aaba14'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'cfcfab0baab649dff3a6189bbbaed754123e149de987f218d36dec419ac06673'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'SHA256' '056841e04f169a6113ccd37e7d684797145a5f55922214e8a3b47a67338965c2'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'SHA256' '5dc96954918ce622568c7f82861357e97fdb7bf5de9331a3d60992dbae018595'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'b46ce16a8888d20539d993d7f25d59a5867cced4abbe3c3671fbcd8892c1259a'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'SHA256' '38ba992548bc1da76c960cf2c9d068cdc6c45c278f73c76a58043387f5c87f8d'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'SHA256' '601007f6d56a88fac36011b4b19dfebf1c0dad12c851fb0212c29409d0cec46e'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'SHA256' 'f85e382ab60231a26921ca791af76bae3d8db8a21702aacc2c5ff1bea1bb566d'
'rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/rsds/gn/v20191016/rsds_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'SHA256' '59ad5b7a3c00cff3ee1adf549809cdfffa346949f8d458a04e0644fd0b51b42c'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'c548726a976acde6e85a9e3f470da61431e237fd3bfb575dfc8f71ebad6fda50'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'SHA256' '0531170b7ba4704951181551fa66affcea89d66b9dd3a7c9a4ac7291576db739'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'SHA256' '5a3e12e92ecc507b712063900140185ce0bfcfe77ac008df28d66aefeb0426c8'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'SHA256' 'ad6fedea4ddec0952dd29ad67a5c463539f181a78b7acbaa454ffe007b643170'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'f3b6bdf24ddf65b031750bdf0a3c746faeff3517fc640206f9b77348d7812041'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'SHA256' '75e7cb6495644fca879c0bf2e2844ea734afdb2c6241b10d54293721c79639db'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'SHA256' 'ec115b4a851ebd5f5a8e23297ae13a78b43536212dbe7405bc84343a3c54f124'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'SHA256' '4642f6835ba052ace67a476d9a974ae0c39475101c7f864a05458bbb221f88de'
'sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/sfcWind/gn/v20200323/sfcWind_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'SHA256' '7ebb6ba7b8447f0f6b3e23cc8ae42a465daa7834b7fbd2dc35ec87e12557e69f'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'd7d1f0b43a53002e3fdce8817b63a4261fd842105be2f97c9da8c07802e3d04f'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'e00f9ca0a8a45c8610200e7a28e010ada32ef805aeb3069e3d37296b982296b2'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'SHA256' 'eb572463e2d9f834d043ea9c0df4efb697d6b3e9d3e283c97d3cf17a1b38e6ae'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'SHA256' '73c7c755e6bbfce43a0f138de523f6c3d5a5d6aab30e23d75403161d89824d51'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'SHA256' '34b3cb438eed302825d53a7702f9ed6a750334cb105762f119740b7b81a60339'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'SHA256' 'f9087cc074e795d2fc903324979e0b97c6960d2e75a279e80e4555f705b153c6'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'SHA256' '1bbfe54f0400c24f72fb9f2efea3c7c2854ad056945afba5351e91467a55e22c'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'SHA256' '73d5f976e1ee41a08eb20ef4f3cde2624729f2fb8b892faa3331f15210e8d6e2'
'tas_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tas/gn/v20191016/tas_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'SHA256' '6d3d50993e495be561e8da491338bd27c8063fc8a83bf7ce102c8e50f0931bc7'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'efb9f5e632644d7590d3608d4f10b0bc6c246fbbcd95054b2e3bb373233250c9'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'SHA256' '03a40cbdf7b67171822c9f25f184a650f5a76774d7d27c20d76015ec9be84a6d'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'SHA256' 'ea874405f60dc56ad23c8fb6f3aa1629c4c1d21388844159c19304c36e73c323'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'SHA256' '4aa20c3413bc5401c67b2e3210a7ee7d2d2c5e146824d6071c08aaf7ca3bfb96'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'f81acfd11f32a2767b1b5ae9e675b0d3efa5064b08af3ba8ef1f3ca891422db9'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'SHA256' 'c747199ec831b3105133ce4d044c3e76d98223952e1443e6fce149b02c670d3a'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'SHA256' '909ad8ae7afdf9322d4fa1051f695536fd6c97dc821e7a8b398a153fcf31520f'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'SHA256' 'a05321a379902b2544bac3e59bb0d9d0e8aa9ef1ad754bbe52b1205fc8fea8bd'
'tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmax/gn/v20191016/tasmax_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'SHA256' '7a9ef3f44aeedc9e1474502fef2866a386b4b50bad30826dc68da977b9f7c796'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20150101-20241231.nc' 'SHA256' '4b1ac85eef88e674d21e96a5d299818213278cf55128c3328f54cbea7450b070'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20250101-20341231.nc' 'SHA256' '238e5855669acc6e3c9db313c5b5c21316cca84f3f2c78ffaded713b7d218831'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20350101-20441231.nc' 'SHA256' '0cb098b60195b656658d066c401ce5ae5d8ea6d4df9da5181b4a7de60dc457ac'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20450101-20541231.nc' 'SHA256' '45565e7b80046fc966451b3c2e21909de056659d5e8627d546370590e03a6764'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'ae06b3657458c6d5ee28da610b60074318e909bd36b1e3cbf2cec41774c1d426'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20650101-20741231.nc' 'SHA256' '71aaeace51b9497b8730d288ea6ea232520bd964de21373e96f084ccd4d672e6'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20750101-20841231.nc' 'SHA256' '1df99d023a5a1fb1dcb3dfdf9fc61d05634209d17c54f08a2549d053629b6fbf'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20850101-20941231.nc' 'SHA256' '46a23160f693ac9f3bea2e121f79efe0fd4f69696d6829acd50fabd65453b21a'
'tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp370/r3i1p1f1/day/tasmin/gn/v20191016/tasmin_day_MIROC6_ssp370_r3i1p1f1_gn_20950101-21001231.nc' 'SHA256' '9cb53a18e20280b2195b5833d63bcb50e02b84ad537ac3083627d7c7114e004c'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 140 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
